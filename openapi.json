{
  "info": { "title": "Yatri", "version": "1.0" },
  "paths": {
    "/v2": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "type": "string" }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v2/auth": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "x-bundle-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-client-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-config-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-device",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AuthReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `x-device` or `x-config-version` or `x-client-version` or `x-bundle-version` or `body`"
          }
        }
      }
    },
    "/v2/auth/signature": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "x-bundle-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-client-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-config-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-device",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `x-device` or `x-config-version` or `x-client-version` or `x-bundle-version` or `x-sdk-authorization`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "SignatureAuthReq": [] }]
      }
    },
    "/v2/auth/{authId}/verify": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "authId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AuthVerifyReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthVerifyRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body`" },
          "404": { "description": "`authId` not found" }
        }
      }
    },
    "/v2/auth/otp/{authId}/resend": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "authId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthRes" }
              }
            },
            "description": ""
          },
          "404": { "description": "`authId` not found" }
        }
      }
    },
    "/v2/auth/logout": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/profile": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "toss",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ProfileRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `toss` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      },
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "x-bundle-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-client-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-config-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-device",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/UpdateProfileReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `x-device` or `x-config-version` or `x-client-version` or `x-bundle-version` or `body` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/profile/updateEmergencySettings": {
      "put": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmergencySettingsReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/profile/getEmergencySettings": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencySettingsRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/profile/defaultEmergencyNumbers": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetProfileDefaultEmergencyNumbersResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDefaultEmergencyNumbersReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/methods": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsResponse"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/methods/{paymentMethodId}/makeDefault": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "paymentMethodId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`paymentMethodId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/intent/setup": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SetupIntentResponse" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/intent/payment": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/{rideId}/method/{paymentMethodId}/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "paymentMethodId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` or `paymentMethodId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/methods/{paymentMethodId}/delete": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "paymentMethodId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`paymentMethodId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/{rideId}/addTip": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AddTipRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/{rideId}/createOrder": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CreateOrderResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/{orderId}/status": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/PaymentStatusResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`orderId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "orderId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOrderAPIEntity"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `orderId` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/payment/{notificationId}/notification": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "notificationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CreateOrderResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`notificationId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideSearch": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "x-bundle-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-client-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "x-config-version",
            "required": false,
            "schema": { "pattern": "^\\d+.\\d+.\\d+", "type": "string" }
          },
          {
            "in": "header",
            "name": "client-id",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "x-device",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "is-dashboard-request",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/SearchReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SearchResp" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `is-dashboard-request` or `x-device` or `client-id` or `x-config-version` or `x-client-version` or `x-bundle-version` or `body` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/estimate/{estimateId}/select": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/DSelectReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/DSelectResultRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`estimateId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/estimate/{estimateId}/select2": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/DSelectReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`estimateId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/estimate/{estimateId}/quotes": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SelectListRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`estimateId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/estimate/{estimateId}/results": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/QuotesResultResponse"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`estimateId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/estimate/{estimateId}/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CancelAPIResponse" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`estimateId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideSearch/{searchId}/results": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "searchId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetQuotesRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`searchId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideSearch/quotes/{quoteId}/confirm": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "quoteId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "paymentMethodId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ConfirmRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `paymentMethodId` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`quoteId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/{rideBookingId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/BookingAPIEntity" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideBookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/v2/{rideBookingId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/BookingStatusAPIEntity"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideBookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/list": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "onlyActive",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "NEW",
                "CONFIRMED",
                "AWAITING_REASSIGNMENT",
                "REALLOCATED",
                "COMPLETED",
                "CANCELLED",
                "TRIP_ASSIGNED"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/BookingListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `clientId` or `status` or `onlyActive` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/favouriteList": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "onlyActive",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "NEW",
                "CONFIRMED",
                "AWAITING_REASSIGNMENT",
                "REALLOCATED",
                "COMPLETED",
                "CANCELLED",
                "TRIP_ASSIGNED"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/DriverNo" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/FavouriteBookingListRes"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `clientId` or `status` or `onlyActive` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/{rideBookingId}/addStop": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/StopReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideBookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/{rideBookingId}/editStop": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/StopReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideBookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/{rideBookingId}/softCancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideBookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/cancellationDues": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "rideBookingId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CancellationDuesDetailsRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token` or `rideBookingId`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/rideBooking/{rideBookingId}/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CancelReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideBookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ride/{rideId}/driver/location": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetDriverLocResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ride/{rideId}/status": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetRideStatusResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ride/{rideId}/edit/location": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/EditLocationReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/EditLocationResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ride/{rideId}/call/driver": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CallRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ride/{rideId}/call/{callId}/status": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "callId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CallStatusAPIEntity" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` or `callId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ride/call/statusCallback": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ExotelCallCallbackReq_CallAttachments"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AckResponse" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body`" }
        }
      }
    },
    "/v2/exotel/call/driver/number": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "CallSid",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "CallFrom",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "CallTo",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "digits",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "CallStatus",
            "required": true,
            "schema": {
              "enum": [
                "QUEUED",
                "RINGING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "BUSY",
                "NO_ANSWER",
                "CANCELED",
                "INVALID_STATUS",
                "CONNECTED",
                "NOT_CONNECTED",
                "MISSED",
                "ATTEMPTED"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "To",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "type": "string" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `To` or `CallStatus` or `digits` or `CallTo` or `CallFrom` or `CallSid`"
          }
        }
      }
    },
    "/v2/exotel/call/statusCallback": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "CallSid",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "DialCallStatus",
            "required": true,
            "schema": {
              "enum": [
                "QUEUED",
                "RINGING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "BUSY",
                "NO_ANSWER",
                "CANCELED",
                "INVALID_STATUS",
                "CONNECTED",
                "NOT_CONNECTED",
                "MISSED",
                "ATTEMPTED"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "RecordingUrl",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "Legs[0][OnCallDuration]",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "CallDuration",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AckResponse" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `CallDuration` or `Legs[0][OnCallDuration]` or `RecordingUrl` or `DialCallStatus` or `CallSid`"
          }
        }
      }
    },
    "/v2/exotel/call/ride/{rideId}/call/onClick": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "404": { "description": "`rideId` not found" }
        }
      }
    },
    "/v2/exotel/call/alternate/driver/number": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "CallSid",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "CallFrom",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "CallTo",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "digits",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "CallStatus",
            "required": true,
            "schema": {
              "enum": [
                "QUEUED",
                "RINGING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "BUSY",
                "NO_ANSWER",
                "CANCELED",
                "INVALID_STATUS",
                "CONNECTED",
                "NOT_CONNECTED",
                "MISSED",
                "ATTEMPTED"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "To",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "type": "string" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `To` or `CallStatus` or `digits` or `CallTo` or `CallFrom` or `CallSid`"
          }
        }
      }
    },
    "/v2/support/sendIssue": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/SendIssueReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/support/callbackRequest": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/support/safetyCheckSupport": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/SafetyCheckSupportReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/route": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetRoutesReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/RouteInfo" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/pickup/route": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetRoutesReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/RouteInfo" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/trip/route": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetRoutesReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/RouteInfo" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/serviceability/origin": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/ServiceabilityReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ServiceabilityRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/serviceability/destination": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/ServiceabilityReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ServiceabilityRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/feedback/rateRide": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/FeedbackReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/knowYourDriver/{rideId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/DriverProfileResponse"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/knowYourFavDriver/{driverId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "driverId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/DriverProfileResponse"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`driverId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/feedback/form": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "rating",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/FeedbackFormList" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `rating` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/feedback/submit": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/FeedbackFormReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/maps/autoComplete": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AutoCompleteReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AutoCompleteResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/maps/getPlaceDetails": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetPlaceDetailsReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetPlaceDetailsResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/maps/getPlaceName": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetPlaceNameReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/PlaceName" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/language/translate": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "source",
            "required": true,
            "schema": {
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI",
                "FRENCH",
                "TELUGU"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "target",
            "required": true,
            "schema": {
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI",
                "FRENCH",
                "TELUGU"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "q",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/TranslateResp" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `q` or `target` or `source` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/cancellationReason/list": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "cancellationStage",
            "required": true,
            "schema": {
              "enum": ["OnSearch", "OnInit", "OnConfirm", "OnAssign"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CancellationReasonAPIEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `cancellationStage` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/savedLocation": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CreateSavedReqLocationReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/savedLocation/list": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SavedReqLocationsListRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/savedLocation/{tag}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`tag` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frontend/flowStatus": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "isPolling",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetPersonFlowStatusRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `isPolling` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frontend/notifyEvent": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/NotifyEventReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/whatsapp/opt": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/OptAPIRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/sos/{sosId}/upload": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "sosId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AddSosVideoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`sosId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/callEvent": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CallEventReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/appInstalls/create": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AppInstallsReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body`" }
        }
      }
    },
    "/v2/personStats": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/PersonStatsRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/getHotSpot": {
      "get": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/LatLong" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/HotSpotResponse" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/disability/list": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/Disability" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/verifyAadhaar/generateOtp": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AadhaarOtpReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AadhaarVerificationResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/verifyAadhaar/verifyOtp": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/VerifyAadhaarOtpReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AadhaarOtpVerifyRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI",
                "FRENCH",
                "TELUGU"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/IssueReportReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueReportRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `language` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/list": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI",
                "FRENCH",
                "TELUGU"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueReportListRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `language` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/upload": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueMediaUploadRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/media": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "filePath",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "type": "string" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `filePath` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/category": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI",
                "FRENCH",
                "TELUGU"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/IssueCategoryListRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `language` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/option": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "categoryId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "optionId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueReportId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "rideId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI",
                "FRENCH",
                "TELUGU"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueOptionListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `language` or `rideId` or `issueReportId` or `optionId` or `categoryId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/{issueId}/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI",
                "FRENCH",
                "TELUGU"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `language` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`issueId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/{issueId}/option": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/IssueUpdateReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`issueId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/{issueId}/delete": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`issueId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/issue/{issueId}/updateStatus": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI",
                "FRENCH",
                "TELUGU"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/IssueStatusUpdateReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/IssueStatusUpdateRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `language` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`issueId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/places": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/TicketPlace" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/places/{placeId}/services": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "date",
            "required": false,
            "schema": { "format": "date", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/TicketServiceResp" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `date` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`placeId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/places/{placeId}/book": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/TicketBookingReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CreateOrderResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`placeId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/bookings": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "enum": ["Pending", "Failed", "Booked", "Cancelled"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TicketBookingAPIEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `status` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/bookings/{ticketBookingShortId}/details": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "ticketBookingShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBookingDetails"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`ticketBookingShortId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/bookings/{personServiceId}/{ticketServiceShortId}/verify": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "personServiceId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "ticketServiceShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TicketServiceVerificationResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`personServiceId` or `ticketServiceShortId` not found"
          }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/bookings/{ticketBookingShortId}/status": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "ticketBookingShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/BookingStatus" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`ticketBookingShortId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/booking/cancel": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketBookingCancelReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/bookings/update/seats": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketBookingUpdateSeatsReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ticket/service/cancel": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketServiceCancelReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/invoice": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/InvoiceRes" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `to` or `from` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/follow/ride": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/Followers" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/share/ride": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/ShareRideReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/followRide/ECStatus/{rideId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyContactsStatusRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/sos/getDetails/{rideId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SosDetailsRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/sos/IvrOutcome": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "CallFrom",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "CallSid",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "CallStatus",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "digits",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `digits` or `CallStatus` or `CallSid` or `CallFrom`"
          }
        }
      }
    },
    "/v2/sos/create": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/SosReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SosRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/sos/{sosId}/status": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "sosId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/SosUpdateReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`sosId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/sos/markRideAsSafe/{sosId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "sosId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/MarkAsSafeReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`sosId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/sos/createMockSos": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/MockSosReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/sos/callPolice": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CallPoliceAPI" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/stations": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "city",
            "required": false,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "vehicleType",
            "required": true,
            "schema": { "enum": ["METRO", "BUS"], "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/FRFSStationAPI" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `vehicleType` or `city` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/search": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "vehicleType",
            "required": true,
            "schema": { "enum": ["METRO", "BUS"], "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/FRFSSearchAPIReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/FRFSSearchAPIRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `vehicleType` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/search/{searchId}/quote": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "searchId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/FRFSQuoteAPIRes" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`searchId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/quote/{quoteId}/confirm": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "quoteId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/FRFSTicketBookingStatusAPIRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`quoteId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/quote/{quoteId}/payment/retry": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "quoteId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/FRFSTicketBookingStatusAPIRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`quoteId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/booking/{bookingId}/status": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "bookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/FRFSTicketBookingStatusAPIRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`bookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/booking/list": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FRFSTicketBookingStatusAPIRes"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/booking/{bookingId}/canCancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "bookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`bookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/booking/{bookingId}/canCancel/status": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "bookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/FRFSCanCancelStatus" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`bookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/booking/{bookingId}/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "bookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`bookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/booking/cancel/{bookingId}/status": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "bookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/FRFSCancelStatus" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`bookingId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/config": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/FRFSConfigAPIRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `city` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/getUiConfigs": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "toss",
            "required": true,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/Object" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `toss` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/CustomerRefferal/count": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ReferredCustomers" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/edit/{bookingUpdateRequestId}/result": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "bookingUpdateRequestId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EditLocationResultAPIResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`bookingUpdateRequestId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/edit/result/{bookingUpdateRequestId}/confirm": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "bookingUpdateRequestId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`bookingUpdateRequestId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/social/login": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/SocialLoginReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SocialLoginRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body`" }
        }
      }
    },
    "/v2/social/update/profile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SocialUpdateProfileReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/ride/{rideId}/estimateBreakup": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/EstimateDetailsRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`rideId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/driver/favorites": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FavouriteDriverResp"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/favorites/{driverId}/remove": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "driverId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`driverId` not found" }
        },
        "security": [{ "VerifyToken": [] }]
      }
    },
    "/v2/frfs/partnerOrganization/upsertPersonAndGetFare": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetFareReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetFareResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `x-api-key`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "PartnerOrganizationVerifyAPIKey": [] }]
      }
    },
    "/v2/frfs/partnerOrganization/getConfig/fromStation/{fromGMMStationId}/toStation/{toGMMStationId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "fromGMMStationId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "toGMMStationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetConfigResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `x-api-key`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`fromGMMStationId` or `toGMMStationId` not found"
          }
        },
        "security": [{ "PartnerOrganizationVerifyAPIKey": [] }]
      }
    },
    "/v2/frfs/shareTicketInfo/{ticketBookingId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "ticketBookingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ShareTicketInfoResp" }
              }
            },
            "description": ""
          },
          "404": { "description": "`ticketBookingId` not found" }
        }
      }
    },
    "/{merchantId}/service/juspay/payment": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "city",
            "required": false,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "serviceType",
            "required": false,
            "schema": { "enum": ["Normal", "FRFSBooking"], "type": "string" }
          },
          {
            "in": "query",
            "name": "placeId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/Value" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AckResponse" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `Authorization` or `placeId` or `serviceType` or `city`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "\"username-password\"": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "enabled",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "in": "query",
            "name": "blocked",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "in": "query",
            "name": "phone",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "personId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CustomerListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `personId` or `phone` or `blocked` or `enabled` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/delete": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/block": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/unblock": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CustomerInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/cancellationDuesSync": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCancellationDuesSyncReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/getCancellationDuesDetails": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CancellationDuesDetailsRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/updateSafetyCenterBlocking": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSafetyCenterBlockingReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/personNumbers": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/PersonRes" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/customer/personId": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/PersonRes" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/ride/{rideId}/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ShareRideInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `rideId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/ride/{rideShortId}/rideInfo": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "rideShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ShareRideInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `rideShortId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/ride/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "bookingStatus",
            "required": false,
            "schema": {
              "enum": [
                "UPCOMING",
                "UPCOMING_6HRS",
                "ONGOING",
                "ONGOING_6HRS",
                "RCOMPLETED",
                "RCANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "rideShortId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "customerPhoneNo",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "driverPhoneNo",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "from",
            "required": false,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          },
          {
            "in": "query",
            "name": "to",
            "required": false,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/RideListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `to` or `from` or `driverPhoneNo` or `customerPhoneNo` or `rideShortId` or `bookingStatus` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/ride/trip/route/{rideId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "lat",
            "required": true,
            "schema": { "format": "double", "type": "number" }
          },
          {
            "in": "query",
            "name": "lon",
            "required": true,
            "schema": { "format": "double", "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/RouteInfo" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `lon` or `lat` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `rideId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/ride/rideinfo/{rideId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/RideInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `rideId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/ride/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/MultipleRideCancelReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/ride/sync": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/MultipleRideSyncReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleRideSyncResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/ride/kapture/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "rideShortId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "countryCode",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "supportPhoneNumber",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/TicketRideListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `supportPhoneNumber` or `phoneNumber` or `countryCode` or `rideShortId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issue/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "mobileCountryCode",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "mobileNumber",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "from",
            "required": false,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          },
          {
            "in": "query",
            "name": "to",
            "required": false,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `to` or `from` or `mobileNumber` or `mobileCountryCode` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issue/kapture/ticketStatus": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/Value" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/category": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/IssueCategoryListRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "OPEN",
                "PENDING_INTERNAL",
                "PENDING_EXTERNAL",
                "RESOLVED",
                "CLOSED",
                "REOPENED",
                "NOT_APPLICABLE"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "assignee",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/IssueReportListResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `assignee` or `category` or `status` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/{issueId}/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `issueId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueShortId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueInfoRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `issueShortId` or `issueId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/{issueId}/update": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/IssueUpdateByUserReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `issueId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/{issueId}/comment": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/IssueAddCommentByUserReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `issueId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/media": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "filePath",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "type": "string" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `filePath` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/kapture/ticketStatus": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/Value" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/category/create": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CreateIssueCategoryReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/category/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueCategoryId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIssueCategoryReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `issueCategoryId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/option/create": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueCategoryId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueMessageId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CreateIssueOptionReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `issueMessageId` or `issueCategoryId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/option/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueOptionid",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/UpdateIssueOptionReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `issueOptionid` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/issueV2/message/upsert": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/tickets/{personServiceId}/{ticketBookingShortId}/verify": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "personServiceId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "ticketBookingShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TicketServiceVerificationResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `personServiceId` or `ticketBookingShortId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{ticketPlaceId}/services": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "ticketPlaceId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "date",
            "required": false,
            "schema": { "format": "date", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/TicketServiceResp" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `date` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `ticketPlaceId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketBookingUpdateSeatsReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/places": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/TicketPlace" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/bookings/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketBookingCancelReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/service/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketServiceCancelReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/booking/{ticketBookingShortId}/details": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "ticketBookingShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBookingDetails"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `ticketBookingShortId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/removeExpired": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/booking/cancel/allStuck": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/StuckBookingsCancelReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/StuckBookingsCancelRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/booking/sync": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MultipleBookingSyncReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleBookingSyncResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/MerchantUpdateReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceUsageConfig": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUsageConfigRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceConfig/maps/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MapsServiceConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceUsageConfig/maps/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MapsServiceUsageConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceConfig/sms/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SmsServiceConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceUsageConfig/sms/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SmsServiceUsageConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/config/operatingCity/create": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantOperatingCityReqT"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantOperatingCityRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/specialLocation/upsert": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "specialLocationId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpsertSpecialLocationReqT"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `specialLocationId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/specialLocation/{specialLocationId}/delete": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "specialLocationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `specialLocationId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/specialLocation/{specialLocationId}/gates/upsert": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "specialLocationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpsertSpecialLocationGateReqT"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `specialLocationId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/merchant/specialLocation/{specialLocationId}/gates/delete/{gateName}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "specialLocationId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "gateName",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `specialLocationId` or `gateName` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/invoice/invoice": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/InvoiceRes" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `to` or `phoneNumber` or `from` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/registration/auth": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CustomerAuthReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/registration/{authId}/verify": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "authId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AuthVerifyReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthVerifyRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `authId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/registration/otp/{authId}/resend": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "authId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `authId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/registration/logout/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/profile/detail/{customerId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ProfileRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/profile/update/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/UpdateProfileReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/search/{customerId}/rideSearch": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/SearchReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SearchResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/quote/{searchId}/{customerId}/result": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "searchId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetQuotesRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `searchId` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/select/estimate/{customerId}/{estimateId}/select": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/DSelectReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `customerId` or `estimateId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/select/{customerId}/{estimateId}/quotes": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SelectListRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `customerId` or `estimateId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/select/{customerId}/{estimateId}/result": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/QuotesResultResponse"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `customerId` or `estimateId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/select/{customerId}/{estimateId}/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CancelAPIResponse" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `customerId` or `estimateId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/confirm/rideSearch/{customerId}/quotes/{quoteId}/confirm": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "quoteId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "paymentMethodId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ConfirmRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `paymentMethodId` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `customerId` or `quoteId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/booking/ridebooking/{rideBookingId}/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/BookingAPIEntity" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `rideBookingId` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/booking/list/{customerId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "onlyActive",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "NEW",
                "CONFIRMED",
                "AWAITING_REASSIGNMENT",
                "REALLOCATED",
                "COMPLETED",
                "CANCELLED",
                "TRIP_ASSIGNED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/BookingListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `status` or `onlyActive` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/maps/autoComplete/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AutoCompleteReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AutoCompleteResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/maps/getPlaceDetails/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetPlaceDetailsReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetPlaceDetailsResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/maps/getPlaceName/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetPlaceNameReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/PlaceName" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/frontend/flowStatus/{customerId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "isPolling",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetPersonFlowStatusRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `isPolling` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/frontend/notifyEvent/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/NotifyEventReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `customerId` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/rideBooking/rideBooking/cancel/{rideBookingId}/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CancelReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `rideBookingId` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/exotel/heartbeat": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/ExotelHeartbeatReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "enabled",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "in": "query",
            "name": "blocked",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "in": "query",
            "name": "phone",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "personId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CustomerListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `personId` or `phone` or `blocked` or `enabled` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/{customerId}/delete": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/{customerId}/block": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/{customerId}/unblock": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/{customerId}/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CustomerInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/{customerId}/cancellationDuesSync": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCancellationDuesSyncReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/{customerId}/getCancellationDuesDetails": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CancellationDuesDetailsRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/{customerId}/updateSafetyCenterBlocking": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSafetyCenterBlockingReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/personNumbers": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/PersonRes" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/customer/personId": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/PersonRes" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/ride/{rideId}/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ShareRideInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `rideId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/ride/{rideShortId}/rideInfo": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "rideShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ShareRideInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `rideShortId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/ride/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "bookingStatus",
            "required": false,
            "schema": {
              "enum": [
                "UPCOMING",
                "UPCOMING_6HRS",
                "ONGOING",
                "ONGOING_6HRS",
                "RCOMPLETED",
                "RCANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "rideShortId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "customerPhoneNo",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "driverPhoneNo",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "from",
            "required": false,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          },
          {
            "in": "query",
            "name": "to",
            "required": false,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/RideListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `to` or `from` or `driverPhoneNo` or `customerPhoneNo` or `rideShortId` or `bookingStatus` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/ride/trip/route/{rideId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "lat",
            "required": true,
            "schema": { "format": "double", "type": "number" }
          },
          {
            "in": "query",
            "name": "lon",
            "required": true,
            "schema": { "format": "double", "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/RouteInfo" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `lon` or `lat` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `rideId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/ride/rideinfo/{rideId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "rideId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/RideInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `rideId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/ride/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/MultipleRideCancelReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/ride/sync": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/MultipleRideSyncReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleRideSyncResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/ride/kapture/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "rideShortId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "countryCode",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "supportPhoneNumber",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/TicketRideListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `supportPhoneNumber` or `phoneNumber` or `countryCode` or `rideShortId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issue/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "mobileCountryCode",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "mobileNumber",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "from",
            "required": false,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          },
          {
            "in": "query",
            "name": "to",
            "required": false,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `to` or `from` or `mobileNumber` or `mobileCountryCode` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issue/kapture/ticketStatus": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/Value" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/category": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/IssueCategoryListRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/list": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "OPEN",
                "PENDING_INTERNAL",
                "PENDING_EXTERNAL",
                "RESOLVED",
                "CLOSED",
                "REOPENED",
                "NOT_APPLICABLE"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "assignee",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/IssueReportListResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `assignee` or `category` or `status` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/{issueId}/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueInfoRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `issueId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/info": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "issueId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueShortId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/IssueInfoRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `issueShortId` or `issueId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/{issueId}/update": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/IssueUpdateByUserReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `issueId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/{issueId}/comment": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/IssueAddCommentByUserReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `issueId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/media": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filePath",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "type": "string" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `filePath` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/kapture/ticketStatus": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/Value" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/category/create": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CreateIssueCategoryReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/category/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "issueCategoryId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIssueCategoryReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `issueCategoryId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/option/create": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "issueCategoryId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "issueMessageId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CreateIssueOptionReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `issueMessageId` or `issueCategoryId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/option/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "issueOptionid",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/UpdateIssueOptionReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `issueOptionid` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/issueV2/message/upsert": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/tickets/{personServiceId}/{ticketBookingShortId}/verify": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "personServiceId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "ticketBookingShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TicketServiceVerificationResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `personServiceId` or `ticketBookingShortId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/{ticketPlaceId}/services": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketPlaceId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "date",
            "required": false,
            "schema": { "format": "date", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/TicketServiceResp" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `date` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `ticketPlaceId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketBookingUpdateSeatsReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/places": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/TicketPlace" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/bookings/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketBookingCancelReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/service/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TicketServiceCancelReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/booking/{ticketBookingShortId}/details": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ticketBookingShortId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBookingDetails"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `ticketBookingShortId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/removeExpired": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/booking/cancel/allStuck": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/StuckBookingsCancelReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/StuckBookingsCancelRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/booking/sync": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MultipleBookingSyncReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleBookingSyncResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/MerchantUpdateReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/serviceUsageConfig": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUsageConfigRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/serviceConfig/maps/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MapsServiceConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/serviceUsageConfig/maps/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MapsServiceUsageConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/serviceConfig/sms/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SmsServiceConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/serviceUsageConfig/sms/update": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SmsServiceUsageConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/config/operatingCity/create": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantOperatingCityReqT"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantOperatingCityRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/specialLocation/upsert": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "specialLocationId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpsertSpecialLocationReqT"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `body` or `specialLocationId` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/specialLocation/{specialLocationId}/delete": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "specialLocationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `specialLocationId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/specialLocation/{specialLocationId}/gates/upsert": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "specialLocationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpsertSpecialLocationGateReqT"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `specialLocationId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/merchant/specialLocation/{specialLocationId}/gates/delete/{gateName}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "specialLocationId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "gateName",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `specialLocationId` or `gateName` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/invoice/invoice": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": { "format": "yyyy-mm-ddThh:MM:ssZ", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/InvoiceRes" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `to` or `phoneNumber` or `from` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/registration/auth": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CustomerAuthReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "description": "`merchantId` or `city` not found" }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/registration/{authId}/verify": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "authId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AuthVerifyReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthVerifyRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `authId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/registration/otp/{authId}/resend": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "authId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AuthRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `authId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/registration/logout/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/profile/detail/{customerId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ProfileRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/profile/update/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/UpdateProfileReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/search/{customerId}/rideSearch": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/SearchReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SearchResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/quote/{searchId}/{customerId}/result": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "searchId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetQuotesRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `searchId` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/select/estimate/{customerId}/{estimateId}/select": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/DSelectReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` or `estimateId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/select/{customerId}/{estimateId}/quotes": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/SelectListRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` or `estimateId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/select/{customerId}/{estimateId}/result": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/QuotesResultResponse"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` or `estimateId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/select/{customerId}/{estimateId}/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "estimateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/CancelAPIResponse" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` or `estimateId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/confirm/rideSearch/{customerId}/quotes/{quoteId}/confirm": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "quoteId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "paymentMethodId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/ConfirmRes" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `paymentMethodId` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` or `quoteId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/booking/ridebooking/{rideBookingId}/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/BookingAPIEntity" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `rideBookingId` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/booking/list/{customerId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "onlyActive",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "NEW",
                "CONFIRMED",
                "AWAITING_REASSIGNMENT",
                "REALLOCATED",
                "COMPLETED",
                "CANCELLED",
                "TRIP_ASSIGNED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/BookingListRes" }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid `status` or `onlyActive` or `offset` or `limit` or `token`"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/maps/autoComplete/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/AutoCompleteReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/AutoCompleteResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/maps/getPlaceDetails/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetPlaceDetailsReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/GetPlaceDetailsResp" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/maps/getPlaceName/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/GetPlaceNameReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/PlaceName" },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/frontend/flowStatus/{customerId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "isPolling",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetPersonFlowStatusRes"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `isPolling` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/frontend/notifyEvent/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/NotifyEventReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/dashboard/{merchantId}/{city}/rideBooking/rideBooking/cancel/{rideBookingId}/{customerId}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "enum": [
                "Bangalore",
                "Kolkata",
                "Paris",
                "Kochi",
                "Delhi",
                "Hyderabad",
                "Mumbai",
                "Chennai",
                "TamilNaduCities",
                "Mysore",
                "Pondicherry",
                "Pune",
                "Tumakuru",
                "Noida",
                "Gurugram",
                "Tirunelveli",
                "Thanjavur",
                "Vellore",
                "Madurai",
                "Salem",
                "Hosur",
                "Trichy",
                "Minneapolis",
                "Trivandrum",
                "Thrissur",
                "Kozhikode",
                "Chandigarh",
                "Jaipur",
                "Siliguri",
                "Asansol",
                "Gangtok",
                "Darjeeling",
                "Davanagere",
                "Shivamogga",
                "Hubli",
                "Mangalore",
                "Udupi",
                "Gulbarga",
                "AnyCity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "rideBookingId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CancelReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": {
            "description": "`merchantId` or `city` or `rideBookingId` or `customerId` not found"
          }
        },
        "security": [{ "DashboardVerifyToken": [] }]
      }
    },
    "/internal/feedback/rateRide": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/FeedbackReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `token`" }
        }
      }
    },
    "/internal/frfs/statusUpdate": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/FRFSStatusUpdateReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": { "$ref": "#/components/schemas/APISuccess" }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body`" }
        }
      }
    },
    "/internal/typeCheck": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": { "$ref": "#/components/schemas/CacTypeValidationReq" }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CacTypeValidationResp"
                }
              }
            },
            "description": ""
          },
          "400": { "description": "Invalid `body` or `Authorization`" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthRes": {
        "properties": {
          "attempts": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "authId": { "type": "string" },
          "authType": { "$ref": "#/components/schemas/LoginType" },
          "isPersonBlocked": { "type": "boolean" },
          "person": { "$ref": "#/components/schemas/PersonAPIEntity" },
          "token": { "type": "string" }
        },
        "required": ["authId", "attempts", "authType", "isPersonBlocked"],
        "type": "object"
      },
      "LoginType": {
        "enum": ["OTP", "PASSWORD", "DIRECT", "OAUTH"],
        "type": "string"
      },
      "PersonAPIEntity": {
        "properties": {
          "bundleVersion": { "$ref": "#/components/schemas/Version" },
          "clientVersion": { "$ref": "#/components/schemas/Version" },
          "disability": { "type": "string" },
          "email": { "type": "string" },
          "firstName": { "type": "string" },
          "followsRide": { "type": "boolean" },
          "gender": { "$ref": "#/components/schemas/Gender" },
          "hasCompletedMockSafetyDrill": { "type": "boolean" },
          "hasCompletedSafetySetup": { "type": "boolean" },
          "hasDisability": { "type": "boolean" },
          "hasTakenRide": { "type": "boolean" },
          "hasTakenValidRide": { "type": "boolean" },
          "id": { "type": "string" },
          "isSafetyCenterDisabled": { "type": "boolean" },
          "language": { "$ref": "#/components/schemas/Language" },
          "lastName": { "type": "string" },
          "maskedDeviceToken": { "type": "string" },
          "maskedMobileNumber": { "type": "string" },
          "middleName": { "type": "string" },
          "referralCode": { "type": "string" },
          "whatsappNotificationEnrollStatus": {
            "$ref": "#/components/schemas/OptApiMethods"
          }
        },
        "required": [
          "id",
          "hasTakenRide",
          "hasTakenValidRide",
          "gender",
          "hasCompletedSafetySetup",
          "followsRide",
          "isSafetyCenterDisabled"
        ],
        "type": "object"
      },
      "OptApiMethods": { "enum": ["OPT_IN", "OPT_OUT"], "type": "string" },
      "Language": {
        "enum": [
          "ENGLISH",
          "HINDI",
          "KANNADA",
          "TAMIL",
          "MALAYALAM",
          "BENGALI",
          "FRENCH",
          "TELUGU"
        ],
        "type": "string"
      },
      "Gender": {
        "enum": ["MALE", "FEMALE", "OTHER", "UNKNOWN", "PREFER_NOT_TO_SAY"],
        "type": "string"
      },
      "Version": {
        "properties": {
          "build": { "type": "string" },
          "maintenance": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "major": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "minor": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "preRelease": { "type": "string" }
        },
        "required": ["major", "minor", "maintenance"],
        "type": "object"
      },
      "AuthReq": {
        "properties": {
          "deviceToken": { "type": "string" },
          "email": { "type": "string" },
          "enableOtpLessRide": { "type": "boolean" },
          "firstName": { "type": "string" },
          "gender": { "$ref": "#/components/schemas/Gender" },
          "identifierType": { "$ref": "#/components/schemas/IdentifierType" },
          "language": { "$ref": "#/components/schemas/Language" },
          "lastName": { "type": "string" },
          "merchantId": { "type": "string" },
          "middleName": { "type": "string" },
          "mobileCountryCode": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "notificationToken": { "type": "string" },
          "otpChannel": { "$ref": "#/components/schemas/OTPChannel" },
          "registrationLat": { "format": "double", "type": "number" },
          "registrationLon": { "format": "double", "type": "number" },
          "whatsappNotificationEnroll": {
            "$ref": "#/components/schemas/OptApiMethods"
          }
        },
        "required": ["merchantId"],
        "type": "object"
      },
      "IdentifierType": {
        "enum": ["MOBILENUMBER", "AADHAAR", "EMAIL"],
        "type": "string"
      },
      "OTPChannel": { "enum": ["SMS", "WHATSAPP", "EMAIL"], "type": "string" },
      "AuthVerifyRes": {
        "properties": {
          "person": { "$ref": "#/components/schemas/PersonAPIEntity" },
          "token": { "type": "string" }
        },
        "required": ["token", "person"],
        "type": "object"
      },
      "AuthVerifyReq": {
        "properties": {
          "deviceToken": { "type": "string" },
          "otp": { "type": "string" },
          "whatsappNotificationEnroll": {
            "$ref": "#/components/schemas/OptApiMethods"
          }
        },
        "required": ["otp", "deviceToken"],
        "type": "object"
      },
      "APISuccess": { "enum": ["Success"], "type": "string" },
      "ProfileRes": {
        "properties": {
          "androidId": { "type": "string" },
          "bundleVersion": { "$ref": "#/components/schemas/Version" },
          "clientVersion": { "$ref": "#/components/schemas/Version" },
          "customerReferralCode": { "type": "string" },
          "deviceId": { "type": "string" },
          "disability": { "type": "string" },
          "email": { "type": "string" },
          "firstName": { "type": "string" },
          "followsRide": { "type": "boolean" },
          "frontendConfigHash": { "type": "string" },
          "gender": { "$ref": "#/components/schemas/Gender" },
          "hasCompletedMockSafetyDrill": { "type": "boolean" },
          "hasCompletedSafetySetup": { "type": "boolean" },
          "hasDisability": { "type": "boolean" },
          "hasTakenRide": { "type": "boolean" },
          "hasTakenValidAmbulanceRide": { "type": "boolean" },
          "hasTakenValidAutoRide": { "type": "boolean" },
          "hasTakenValidBikeRide": { "type": "boolean" },
          "hasTakenValidCabRide": { "type": "boolean" },
          "hasTakenValidRide": { "type": "boolean" },
          "id": { "type": "string" },
          "isSafetyCenterDisabled": { "type": "boolean" },
          "language": { "$ref": "#/components/schemas/Language" },
          "lastName": { "type": "string" },
          "maskedDeviceToken": { "type": "string" },
          "maskedMobileNumber": { "type": "string" },
          "middleName": { "type": "string" },
          "referralCode": { "type": "string" },
          "whatsappNotificationEnrollStatus": {
            "$ref": "#/components/schemas/OptApiMethods"
          }
        },
        "required": [
          "id",
          "hasTakenRide",
          "hasTakenValidRide",
          "hasTakenValidAutoRide",
          "hasTakenValidCabRide",
          "hasTakenValidBikeRide",
          "hasTakenValidAmbulanceRide",
          "gender",
          "hasCompletedSafetySetup",
          "followsRide",
          "isSafetyCenterDisabled"
        ],
        "type": "object"
      },
      "UpdateProfileReq": {
        "properties": {
          "androidId": { "type": "string" },
          "bundleVersion": { "$ref": "#/components/schemas/Version" },
          "clientVersion": { "$ref": "#/components/schemas/Version" },
          "deviceId": { "type": "string" },
          "deviceToken": { "type": "string" },
          "disability": { "$ref": "#/components/schemas/Disability" },
          "email": { "type": "string" },
          "enableOtpLessRide": { "type": "boolean" },
          "firstName": { "type": "string" },
          "gender": { "$ref": "#/components/schemas/Gender" },
          "hasDisability": { "type": "boolean" },
          "language": { "$ref": "#/components/schemas/Language" },
          "lastName": { "type": "string" },
          "middleName": { "type": "string" },
          "notificationToken": { "type": "string" },
          "referralCode": { "type": "string" }
        },
        "type": "object"
      },
      "Disability": {
        "properties": {
          "description": { "type": "string" },
          "id": { "type": "string" }
        },
        "required": ["id"],
        "type": "object"
      },
      "UpdateEmergencySettingsReq": {
        "properties": {
          "hasCompletedSafetySetup": { "type": "boolean" },
          "informPoliceSosFlag": { "type": "boolean" },
          "nightSafetyChecks": { "type": "boolean" },
          "shareEmergencyContacts": { "type": "boolean" },
          "shareTripWithEmergencyContactOption": {
            "$ref": "#/components/schemas/RideShareOptions"
          },
          "shareTripWithEmergencyContacts": { "type": "boolean" }
        },
        "type": "object"
      },
      "RideShareOptions": {
        "enum": ["ALWAYS_SHARE", "SHARE_WITH_TIME_CONSTRAINTS", "NEVER_SHARE"],
        "type": "string"
      },
      "EmergencySettingsRes": {
        "properties": {
          "defaultEmergencyNumbers": {
            "items": {
              "$ref": "#/components/schemas/PersonDefaultEmergencyNumberAPIEntity"
            },
            "type": "array"
          },
          "enablePoliceSupport": { "type": "boolean" },
          "hasCompletedMockSafetyDrill": { "type": "boolean" },
          "hasCompletedSafetySetup": { "type": "boolean" },
          "informPoliceSos": { "type": "boolean" },
          "localPoliceNumber": { "type": "string" },
          "nightSafetyChecks": { "type": "boolean" },
          "shareEmergencyContacts": { "type": "boolean" },
          "shareTripWithEmergencyContactOption": {
            "$ref": "#/components/schemas/RideShareOptions"
          },
          "shareTripWithEmergencyContacts": { "type": "boolean" }
        },
        "required": [
          "shareEmergencyContacts",
          "shareTripWithEmergencyContacts",
          "shareTripWithEmergencyContactOption",
          "hasCompletedMockSafetyDrill",
          "nightSafetyChecks",
          "hasCompletedSafetySetup",
          "defaultEmergencyNumbers",
          "enablePoliceSupport",
          "informPoliceSos"
        ],
        "type": "object"
      },
      "PersonDefaultEmergencyNumberAPIEntity": {
        "properties": {
          "contactPersonId": { "type": "string" },
          "enableForFollowing": { "type": "boolean" },
          "enableForShareRide": { "type": "boolean" },
          "merchantId": { "type": "string" },
          "mobileCountryCode": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "name": { "type": "string" },
          "onRide": { "type": "boolean" },
          "personId": { "type": "string" },
          "priority": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": [
          "personId",
          "name",
          "mobileCountryCode",
          "mobileNumber",
          "priority",
          "enableForFollowing",
          "enableForShareRide",
          "onRide"
        ],
        "type": "object"
      },
      "UpdateProfileDefaultEmergencyNumbersReq": {
        "properties": {
          "defaultEmergencyNumbers": {
            "items": {
              "$ref": "#/components/schemas/PersonDefaultEmergencyNumber"
            },
            "type": "array"
          }
        },
        "required": ["defaultEmergencyNumbers"],
        "type": "object"
      },
      "PersonDefaultEmergencyNumber": {
        "properties": {
          "enableForFollowing": { "type": "boolean" },
          "mobileCountryCode": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "name": { "type": "string" },
          "priority": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["name", "mobileCountryCode", "mobileNumber"],
        "type": "object"
      },
      "GetProfileDefaultEmergencyNumbersResp": {
        "properties": {
          "defaultEmergencyNumbers": {
            "items": {
              "$ref": "#/components/schemas/PersonDefaultEmergencyNumberAPIEntity"
            },
            "type": "array"
          }
        },
        "required": ["defaultEmergencyNumbers"],
        "type": "object"
      },
      "PaymentMethodsResponse": {
        "properties": {
          "defaultPaymentMethodId": { "type": "string" },
          "list": {
            "items": { "$ref": "#/components/schemas/CustomerCard" },
            "type": "array"
          }
        },
        "required": ["list"],
        "type": "object"
      },
      "CustomerCard": {
        "properties": {
          "brand": { "type": "string" },
          "cardId": { "type": "string" },
          "country": { "type": "string" },
          "expMonth": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "expYear": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "last4": { "type": "string" }
        },
        "required": ["cardId", "brand", "last4", "expMonth", "expYear"],
        "type": "object"
      },
      "SetupIntentResponse": {
        "properties": {
          "customerId": { "type": "string" },
          "ephemeralKey": { "type": "string" },
          "setupIntentClientSecret": { "type": "string" }
        },
        "required": ["customerId", "ephemeralKey", "setupIntentClientSecret"],
        "type": "object"
      },
      "PaymentIntentResponse": {
        "properties": {
          "customerId": { "type": "string" },
          "ephemeralKey": { "type": "string" },
          "paymentIntentClientSecret": { "type": "string" }
        },
        "required": ["customerId", "ephemeralKey", "paymentIntentClientSecret"],
        "type": "object"
      },
      "AddTipRequest": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/PriceAPIEntity" }
        },
        "required": ["amount"],
        "type": "object"
      },
      "PriceAPIEntity": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "currency": { "$ref": "#/components/schemas/Currency" }
        },
        "required": ["amount", "currency"],
        "type": "object"
      },
      "HighPrecMoney": { "format": "double", "type": "number" },
      "Currency": { "enum": ["INR", "USD", "EUR"], "type": "string" },
      "CreateOrderResp": {
        "properties": {
          "id": { "type": "string" },
          "order_id": { "type": "string" },
          "payment_links": { "$ref": "#/components/schemas/PaymentLinks" },
          "sdk_payload": { "$ref": "#/components/schemas/SDKPayload" },
          "status": { "$ref": "#/components/schemas/TransactionStatus" }
        },
        "required": ["status", "id", "order_id", "sdk_payload"],
        "type": "object"
      },
      "TransactionStatus": {
        "enum": [
          "NEW",
          "PENDING_VBV",
          "CHARGED",
          "AUTHENTICATION_FAILED",
          "AUTHORIZATION_FAILED",
          "CANCELLED",
          "JUSPAY_DECLINED",
          "AUTHORIZING",
          "COD_INITIATED",
          "STARTED",
          "AUTO_REFUNDED",
          "CLIENT_AUTH_TOKEN_EXPIRED"
        ],
        "type": "string"
      },
      "PaymentLinks": {
        "properties": {
          "deep_link": { "type": "string" },
          "iframe": { "$ref": "#/components/schemas/BaseUrl" },
          "mobile": { "$ref": "#/components/schemas/BaseUrl" },
          "web": { "$ref": "#/components/schemas/BaseUrl" }
        },
        "type": "object"
      },
      "BaseUrl": { "type": "string" },
      "SDKPayload": {
        "properties": {
          "payload": { "$ref": "#/components/schemas/SDKPayloadDetails" },
          "requestId": { "type": "string" },
          "service": { "type": "string" }
        },
        "required": ["payload"],
        "type": "object"
      },
      "SDKPayloadDetails": {
        "properties": {
          "action": { "type": "string" },
          "amount": { "type": "string" },
          "clientAuthToken": { "type": "string" },
          "clientAuthTokenExpiry": { "$ref": "#/components/schemas/UTCTime" },
          "clientId": { "type": "string" },
          "createMandate": { "$ref": "#/components/schemas/MandateType" },
          "currency": { "$ref": "#/components/schemas/Currency" },
          "customerEmail": { "type": "string" },
          "customerId": { "type": "string" },
          "customerPhone": { "type": "string" },
          "description": { "type": "string" },
          "environment": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "mandateEndDate": { "type": "string" },
          "mandateMaxAmount": { "type": "string" },
          "mandateStartDate": { "type": "string" },
          "merchantId": { "type": "string" },
          "options_getUpiDeepLinks": { "type": "boolean" },
          "orderId": { "type": "string" },
          "returnUrl": { "type": "string" }
        },
        "required": [
          "amount",
          "clientAuthToken",
          "clientAuthTokenExpiry",
          "currency"
        ],
        "type": "object"
      },
      "UTCTime": {
        "example": "2016-07-22T00:00:00Z",
        "format": "yyyy-mm-ddThh:MM:ssZ",
        "type": "string"
      },
      "MandateType": { "enum": ["OPTIONAL", "REQUIRED"], "type": "string" },
      "PaymentStatusResp": {
        "oneOf": [
          {
            "properties": {
              "bankErrorCode": { "type": "string" },
              "bankErrorMessage": { "type": "string" },
              "isRetargeted": { "type": "boolean" },
              "isRetried": { "type": "boolean" },
              "payerVpa": { "type": "string" },
              "refunds": {
                "items": { "$ref": "#/components/schemas/RefundsData" },
                "type": "array"
              },
              "retargetLink": { "type": "string" },
              "status": { "$ref": "#/components/schemas/TransactionStatus" },
              "tag": { "enum": ["PaymentStatus"], "type": "string" }
            },
            "required": ["status", "refunds", "tag"],
            "type": "object"
          },
          {
            "properties": {
              "bankErrorCode": { "type": "string" },
              "bankErrorMessage": { "type": "string" },
              "mandateEndDate": { "$ref": "#/components/schemas/UTCTime" },
              "mandateId": { "type": "string" },
              "mandateMaxAmount": {
                "$ref": "#/components/schemas/HighPrecMoney"
              },
              "mandateStartDate": { "$ref": "#/components/schemas/UTCTime" },
              "mandateStatus": { "$ref": "#/components/schemas/MandateStatus" },
              "payerVpa": { "type": "string" },
              "status": { "$ref": "#/components/schemas/TransactionStatus" },
              "tag": { "enum": ["MandatePaymentStatus"], "type": "string" },
              "upi": { "$ref": "#/components/schemas/Upi" }
            },
            "required": [
              "status",
              "mandateStatus",
              "mandateStartDate",
              "mandateEndDate",
              "mandateId",
              "mandateMaxAmount",
              "tag"
            ],
            "type": "object"
          },
          {
            "properties": {
              "eventName": { "$ref": "#/components/schemas/PaymentStatus" },
              "juspayProviedId": { "type": "string" },
              "notificationId": { "type": "string" },
              "notificationStatus": {
                "$ref": "#/components/schemas/NotificationStatus"
              },
              "notificationType": { "type": "string" },
              "responseCode": { "type": "string" },
              "responseMessage": { "type": "string" },
              "sourceInfo": { "$ref": "#/components/schemas/SourceInfo" },
              "sourceObject": { "type": "string" },
              "tag": { "enum": ["PDNNotificationStatusResp"], "type": "string" }
            },
            "required": [
              "notificationStatus",
              "sourceInfo",
              "juspayProviedId",
              "notificationId",
              "tag"
            ],
            "type": "object"
          }
        ]
      },
      "RefundsData": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "errorCode": { "type": "string" },
          "errorMessage": { "type": "string" },
          "idAssignedByServiceProvider": { "type": "string" },
          "initiatedBy": { "type": "string" },
          "requestId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/RefundStatus" }
        },
        "required": [
          "idAssignedByServiceProvider",
          "amount",
          "status",
          "requestId"
        ],
        "type": "object"
      },
      "RefundStatus": {
        "enum": [
          "REFUND_PENDING",
          "REFUND_FAILURE",
          "REFUND_SUCCESS",
          "MANUAL_REVIEW"
        ],
        "type": "string"
      },
      "MandateStatus": {
        "enum": [
          "CREATED",
          "ACTIVE",
          "FAILURE",
          "PAUSED",
          "EXPIRED",
          "REVOKED"
        ],
        "type": "string"
      },
      "Upi": {
        "properties": {
          "payerApp": { "type": "string" },
          "payerAppName": { "type": "string" },
          "payerVpa": { "type": "string" },
          "txnFlowType": { "type": "string" }
        },
        "type": "object"
      },
      "PaymentStatus": {
        "enum": [
          "ORDER_SUCCEEDED",
          "ORDER_REFUNDED",
          "ORDER_FAILED",
          "ORDER_REFUND_FAILED",
          "TXN_CREATED",
          "REFUND_MANUAL_REVIEW_NEEDED",
          "REFUND_INITIATED",
          "AUTO_REFUND_SUCCEEDED",
          "AUTO_REFUND_FAILED",
          "MANDATE_CREATED",
          "MANDATE_ACTIVATED",
          "MANDATE_FAILED",
          "MANDATE_REVOKED",
          "MANDATE_PAUSED",
          "MANDATE_EXPIRED",
          "NOTIFICATION_FAILED",
          "NOTIFICATION_SUCCEEDED",
          "ORDER_AUTHORIZED",
          "TXN_CHARGED",
          "TXN_FAILED"
        ],
        "type": "string"
      },
      "NotificationStatus": {
        "enum": [
          "NOTIFICATION_CREATED",
          "NOTIFICATION_FAILURE",
          "PENDING",
          "SUCCESS"
        ],
        "type": "string"
      },
      "SourceInfo": {
        "properties": {
          "sourceAmount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "txnDate": { "$ref": "#/components/schemas/UTCTime" }
        },
        "type": "object"
      },
      "PaymentOrderAPIEntity": {
        "properties": {
          "action": { "type": "string" },
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "clientAuthToken": { "type": "string" },
          "clientAuthTokenExpiry": { "$ref": "#/components/schemas/UTCTime" },
          "clientId": { "type": "string" },
          "createMandate": { "$ref": "#/components/schemas/MandateType" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "currency": { "$ref": "#/components/schemas/Currency" },
          "description": { "type": "string" },
          "environment": { "type": "string" },
          "getUpiDeepLinksOption": { "type": "boolean" },
          "id": { "type": "string" },
          "mandateEndDate": { "$ref": "#/components/schemas/UTCTime" },
          "mandateMaxAmount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "mandateStartDate": { "$ref": "#/components/schemas/UTCTime" },
          "merchantId": { "type": "string" },
          "paymentLinks": { "$ref": "#/components/schemas/PaymentLinks" },
          "personId": { "type": "string" },
          "requestId": { "type": "string" },
          "returnUrl": { "type": "string" },
          "service": { "type": "string" },
          "shortId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/TransactionStatus" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": [
          "id",
          "shortId",
          "personId",
          "merchantId",
          "amount",
          "currency",
          "status",
          "paymentLinks",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "SearchResp": {
        "properties": {
          "routeInfo": { "$ref": "#/components/schemas/RouteInfo" },
          "searchExpiry": { "$ref": "#/components/schemas/UTCTime" },
          "searchId": { "type": "string" }
        },
        "required": ["searchId", "searchExpiry"],
        "type": "object"
      },
      "RouteInfo": {
        "properties": {
          "boundingBox": {
            "$ref": "#/components/schemas/BoundingBoxWithoutCRS"
          },
          "distance": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "distanceWithUnit": { "$ref": "#/components/schemas/Distance" },
          "duration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "points": {
            "items": { "$ref": "#/components/schemas/LatLong" },
            "type": "array"
          },
          "snappedWaypoints": {
            "items": { "$ref": "#/components/schemas/LatLong" },
            "type": "array"
          },
          "staticDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["snappedWaypoints", "points"],
        "type": "object"
      },
      "Distance": {
        "properties": {
          "unit": { "$ref": "#/components/schemas/DistanceUnit" },
          "value": { "$ref": "#/components/schemas/HighPrecDistance" }
        },
        "required": ["value", "unit"],
        "type": "object"
      },
      "HighPrecDistance": { "format": "double", "type": "number" },
      "DistanceUnit": {
        "enum": ["Meter", "Mile", "Yard", "Kilometer"],
        "type": "string"
      },
      "BoundingBoxWithoutCRS": {
        "description": "https://datatracker.ietf.org/doc/html/rfc7946#section-5",
        "type": "string"
      },
      "LatLong": {
        "properties": {
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" }
        },
        "required": ["lat", "lon"],
        "type": "object"
      },
      "SearchReq": {
        "oneOf": [
          {
            "properties": {
              "contents": { "$ref": "#/components/schemas/OneWaySearchReq" },
              "fareProductType": { "enum": ["ONE_WAY"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": { "$ref": "#/components/schemas/RentalSearchReq" },
              "fareProductType": { "enum": ["RENTAL"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": { "$ref": "#/components/schemas/InterCitySearchReq" },
              "fareProductType": { "enum": ["INTER_CITY"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": { "$ref": "#/components/schemas/OneWaySearchReq" },
              "fareProductType": { "enum": ["AMBULANCE"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          }
        ]
      },
      "OneWaySearchReq": {
        "properties": {
          "destination": { "$ref": "#/components/schemas/SearchReqLocation" },
          "isDestinationManuallyMoved": { "type": "boolean" },
          "isReallocationEnabled": { "type": "boolean" },
          "isSourceManuallyMoved": { "type": "boolean" },
          "isSpecialLocation": { "type": "boolean" },
          "origin": { "$ref": "#/components/schemas/SearchReqLocation" },
          "quotesUnifiedFlow": { "type": "boolean" },
          "sessionToken": { "type": "string" },
          "startTime": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": ["origin", "destination"],
        "type": "object"
      },
      "SearchReqLocation": {
        "properties": {
          "address": { "$ref": "#/components/schemas/LocationAddress" },
          "gps": { "$ref": "#/components/schemas/LatLong" }
        },
        "required": ["gps", "address"],
        "type": "object"
      },
      "LocationAddress": {
        "properties": {
          "area": { "type": "string" },
          "areaCode": { "type": "string" },
          "building": { "type": "string" },
          "city": { "type": "string" },
          "country": { "type": "string" },
          "door": { "type": "string" },
          "placeId": { "type": "string" },
          "state": { "type": "string" },
          "street": { "type": "string" },
          "ward": { "type": "string" }
        },
        "type": "object"
      },
      "RentalSearchReq": {
        "properties": {
          "estimatedRentalDistance": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedRentalDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "isReallocationEnabled": { "type": "boolean" },
          "isSourceManuallyMoved": { "type": "boolean" },
          "isSpecialLocation": { "type": "boolean" },
          "origin": { "$ref": "#/components/schemas/SearchReqLocation" },
          "quotesUnifiedFlow": { "type": "boolean" },
          "startTime": { "$ref": "#/components/schemas/UTCTime" },
          "stops": {
            "items": { "$ref": "#/components/schemas/SearchReqLocation" },
            "type": "array"
          }
        },
        "required": [
          "origin",
          "startTime",
          "estimatedRentalDistance",
          "estimatedRentalDuration"
        ],
        "type": "object"
      },
      "InterCitySearchReq": {
        "properties": {
          "isDestinationManuallyMoved": { "type": "boolean" },
          "isReallocationEnabled": { "type": "boolean" },
          "isSourceManuallyMoved": { "type": "boolean" },
          "isSpecialLocation": { "type": "boolean" },
          "origin": { "$ref": "#/components/schemas/SearchReqLocation" },
          "quotesUnifiedFlow": { "type": "boolean" },
          "returnTime": { "$ref": "#/components/schemas/UTCTime" },
          "roundTrip": { "type": "boolean" },
          "sessionToken": { "type": "string" },
          "startTime": { "$ref": "#/components/schemas/UTCTime" },
          "stops": {
            "items": { "$ref": "#/components/schemas/SearchReqLocation" },
            "type": "array"
          }
        },
        "required": ["origin", "roundTrip", "startTime"],
        "type": "object"
      },
      "DSelectResultRes": {
        "properties": {
          "selectTtl": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["selectTtl"],
        "type": "object"
      },
      "DSelectReq": {
        "properties": {
          "autoAssignEnabled": { "type": "boolean" },
          "autoAssignEnabledV2": { "type": "boolean" },
          "customerExtraFee": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "customerExtraFeeWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "isAdvancedBookingEnabled": { "type": "boolean" },
          "otherSelectedEstimates": {
            "items": { "type": "string" },
            "type": "array"
          },
          "paymentMethodId": { "type": "string" }
        },
        "required": ["autoAssignEnabled"],
        "type": "object"
      },
      "SelectListRes": {
        "properties": {
          "selectedQuotes": {
            "items": { "$ref": "#/components/schemas/QuoteAPIEntity" },
            "type": "array"
          }
        },
        "required": ["selectedQuotes"],
        "type": "object"
      },
      "QuoteAPIEntity": {
        "properties": {
          "agencyCompletedRidesCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "agencyName": { "type": "string" },
          "agencyNumber": { "type": "string" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "discount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "discountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "estimatedFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "estimatedPickupDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedTotalFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedTotalFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "id": { "type": "string" },
          "isAirConditioned": { "type": "boolean" },
          "isValueAddNP": { "type": "boolean" },
          "quoteDetails": { "$ref": "#/components/schemas/QuoteAPIDetails" },
          "quoteFareBreakup": {
            "items": { "$ref": "#/components/schemas/QuoteBreakupAPIEntity" },
            "type": "array"
          },
          "serviceTierName": { "type": "string" },
          "serviceTierShortDesc": { "type": "string" },
          "specialLocationTag": { "type": "string" },
          "tripTerms": { "items": { "type": "string" }, "type": "array" },
          "validTill": { "$ref": "#/components/schemas/UTCTime" },
          "vehicleServiceTierAirConditioned": {
            "format": "double",
            "type": "number"
          },
          "vehicleServiceTierSeatingCapacity": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "vehicleVariant": {
            "$ref": "#/components/schemas/VehicleServiceTierType"
          }
        },
        "required": [
          "id",
          "vehicleVariant",
          "estimatedFare",
          "estimatedTotalFare",
          "estimatedFareWithCurrency",
          "estimatedTotalFareWithCurrency",
          "agencyName",
          "tripTerms",
          "quoteDetails",
          "quoteFareBreakup",
          "createdAt",
          "isValueAddNP",
          "validTill"
        ],
        "type": "object"
      },
      "VehicleServiceTierType": {
        "enum": [
          "SEDAN",
          "SUV",
          "HATCHBACK",
          "AUTO_RICKSHAW",
          "TAXI",
          "TAXI_PLUS",
          "ECO",
          "COMFY",
          "PREMIUM",
          "BIKE",
          "PREMIUM_SEDAN",
          "BLACK",
          "BLACK_XL",
          "AMBULANCE_TAXI",
          "AMBULANCE_TAXI_OXY",
          "AMBULANCE_AC",
          "AMBULANCE_AC_OXY",
          "AMBULANCE_VENTILATOR",
          "SUV_PLUS"
        ],
        "type": "string"
      },
      "QuoteAPIDetails": {
        "oneOf": [
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/OneWayQuoteAPIDetails"
              },
              "fareProductType": { "enum": ["ONE_WAY"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/DriverOfferAPIEntity"
              },
              "fareProductType": { "enum": ["AMBULANCE"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/InterCityDetailsAPIEntity"
              },
              "fareProductType": { "enum": ["INTER_CITY"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/RentalDetailsAPIEntity"
              },
              "fareProductType": { "enum": ["RENTAL"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/DriverOfferAPIEntity"
              },
              "fareProductType": { "enum": ["DRIVER_OFFER"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/SpecialZoneQuoteAPIEntity"
              },
              "fareProductType": {
                "enum": ["OneWaySpecialZoneAPIDetails"],
                "type": "string"
              }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          }
        ]
      },
      "OneWayQuoteAPIDetails": {
        "properties": {
          "distanceToNearestDriver": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "distanceToNearestDriverWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "tollCharges": { "$ref": "#/components/schemas/PriceAPIEntity" }
        },
        "required": [
          "distanceToNearestDriver",
          "distanceToNearestDriverWithUnit"
        ],
        "type": "object"
      },
      "Centesimal": {
        "description": "Monetary amount in a string representation with an optional leading \"-\" for negative numbers. Integer and fractional parts are separated with a dot.Maximum allowed precision (total number of digits) is 30 String format is used to prevent loss of precision.",
        "format": "[-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?",
        "type": "string"
      },
      "DriverOfferAPIEntity": {
        "properties": {
          "distanceToPickup": { "$ref": "#/components/schemas/Centesimal" },
          "distanceToPickupWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "driverName": { "type": "string" },
          "durationToPickup": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "rating": { "$ref": "#/components/schemas/Centesimal" },
          "tollCharges": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "validTill": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": ["driverName", "validTill"],
        "type": "object"
      },
      "InterCityDetailsAPIEntity": {
        "properties": {
          "baseFare": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "deadKmFare": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "kmPerPlannedExtraHour": { "$ref": "#/components/schemas/Distance" },
          "nightShiftInfo": {
            "$ref": "#/components/schemas/NightShiftInfoAPIEntity"
          },
          "perDayMaxHourAllowance": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "perExtraKmRate": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "perExtraMinRate": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "perHourCharge": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "plannedPerKmRateOneWay": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "plannedPerKmRateRoundTrip": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "quoteId": { "type": "string" },
          "roundTrip": { "type": "boolean" },
          "tollCharges": { "$ref": "#/components/schemas/PriceAPIEntity" }
        },
        "required": [
          "quoteId",
          "baseFare",
          "perHourCharge",
          "perExtraMinRate",
          "perExtraKmRate",
          "deadKmFare",
          "plannedPerKmRateOneWay",
          "plannedPerKmRateRoundTrip",
          "kmPerPlannedExtraHour",
          "perDayMaxHourAllowance"
        ],
        "type": "object"
      },
      "NightShiftInfoAPIEntity": {
        "properties": {
          "nightShiftCharge": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "nightShiftChargeWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "nightShiftEnd": { "$ref": "#/components/schemas/TimeOfDay" },
          "nightShiftStart": { "$ref": "#/components/schemas/TimeOfDay" },
          "oldNightShiftCharge": { "$ref": "#/components/schemas/Centesimal" }
        },
        "required": [
          "nightShiftCharge",
          "nightShiftChargeWithCurrency",
          "nightShiftStart",
          "nightShiftEnd"
        ],
        "type": "object"
      },
      "TimeOfDay": {
        "example": "12:33:15",
        "format": "hh:MM:ss",
        "type": "string"
      },
      "RentalDetailsAPIEntity": {
        "properties": {
          "baseFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "baseFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "deadKmFare": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "includedDistancePerHrWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "includedKmPerHr": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "nightShiftInfo": {
            "$ref": "#/components/schemas/NightShiftInfoAPIEntity"
          },
          "perExtraKmRate": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "perExtraKmRateWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "perExtraMinRate": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "perExtraMinRateWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "perHourCharge": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "perHourChargeWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "plannedPerKmRate": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "plannedPerKmRateWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "tollCharges": { "$ref": "#/components/schemas/PriceAPIEntity" }
        },
        "required": [
          "baseFare",
          "perHourCharge",
          "perExtraMinRate",
          "baseFareWithCurrency",
          "perHourChargeWithCurrency",
          "perExtraMinRateWithCurrency",
          "includedKmPerHr",
          "includedDistancePerHrWithUnit",
          "plannedPerKmRate",
          "perExtraKmRate",
          "plannedPerKmRateWithCurrency",
          "perExtraKmRateWithCurrency",
          "deadKmFare"
        ],
        "type": "object"
      },
      "SpecialZoneQuoteAPIEntity": {
        "properties": {
          "quoteId": { "type": "string" },
          "tollCharges": { "$ref": "#/components/schemas/PriceAPIEntity" }
        },
        "required": ["quoteId"],
        "type": "object"
      },
      "QuoteBreakupAPIEntity": {
        "properties": {
          "priceWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "title": { "type": "string" }
        },
        "required": ["title", "priceWithCurrency"],
        "type": "object"
      },
      "QuotesResultResponse": {
        "properties": {
          "bookingId": { "type": "string" },
          "bookingIdV2": { "type": "string" },
          "selectedQuotes": { "$ref": "#/components/schemas/SelectListRes" }
        },
        "type": "object"
      },
      "CancelAPIResponse": {
        "enum": ["BookingAlreadyCreated", "FailedToCancel", "Success"],
        "type": "string"
      },
      "GetQuotesRes": {
        "properties": {
          "estimates": {
            "items": { "$ref": "#/components/schemas/EstimateAPIEntity" },
            "type": "array"
          },
          "fromLocation": { "$ref": "#/components/schemas/LocationAPIEntity" },
          "paymentMethods": {
            "items": { "$ref": "#/components/schemas/PaymentMethodAPIEntity" },
            "type": "array"
          },
          "quotes": {
            "items": { "$ref": "#/components/schemas/OfferRes" },
            "type": "array"
          },
          "toLocation": { "$ref": "#/components/schemas/LocationAPIEntity" }
        },
        "required": ["fromLocation", "quotes", "estimates", "paymentMethods"],
        "type": "object"
      },
      "LocationAPIEntity": {
        "properties": {
          "area": { "type": "string" },
          "areaCode": { "type": "string" },
          "building": { "type": "string" },
          "city": { "type": "string" },
          "country": { "type": "string" },
          "door": { "type": "string" },
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" },
          "placeId": { "type": "string" },
          "state": { "type": "string" },
          "street": { "type": "string" },
          "ward": { "type": "string" }
        },
        "required": ["lat", "lon"],
        "type": "object"
      },
      "OfferRes": {
        "oneOf": [
          {
            "properties": {
              "onDemandCab": { "$ref": "#/components/schemas/QuoteAPIEntity" }
            },
            "required": ["onDemandCab"],
            "type": "object"
          },
          {
            "properties": {
              "onRentalCab": { "$ref": "#/components/schemas/QuoteAPIEntity" }
            },
            "required": ["onRentalCab"],
            "type": "object"
          },
          {
            "properties": {
              "metro": { "$ref": "#/components/schemas/MetroOffer" }
            },
            "required": ["metro"],
            "type": "object"
          },
          {
            "properties": {
              "publicTransport": {
                "$ref": "#/components/schemas/PublicTransportQuote"
              }
            },
            "required": ["publicTransport"],
            "type": "object"
          }
        ]
      },
      "MetroOffer": {
        "properties": {
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "description": { "type": "string" },
          "rideSearchId": { "type": "string" },
          "rides": {
            "items": { "$ref": "#/components/schemas/MetroRide" },
            "type": "array"
          }
        },
        "required": ["rideSearchId", "description", "rides", "createdAt"],
        "type": "object"
      },
      "MetroRide": {
        "properties": {
          "arrivalStation": { "$ref": "#/components/schemas/MetroStation" },
          "departureStation": { "$ref": "#/components/schemas/MetroStation" },
          "price": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "schedule": {
            "items": { "$ref": "#/components/schemas/ScheduleElement" },
            "type": "array"
          }
        },
        "required": ["schedule", "departureStation", "arrivalStation", "price"],
        "type": "object"
      },
      "ScheduleElement": {
        "properties": {
          "arrivalTime": { "$ref": "#/components/schemas/UTCTime" },
          "departureTime": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": ["departureTime", "arrivalTime"],
        "type": "object"
      },
      "MetroStation": {
        "properties": {
          "name": { "type": "string" },
          "point": { "$ref": "#/components/schemas/LatLong" },
          "stationCode": { "type": "string" }
        },
        "required": ["name", "point"],
        "type": "object"
      },
      "PublicTransportQuote": {
        "properties": {
          "arrivalStation": {
            "$ref": "#/components/schemas/PublicTransportStation"
          },
          "arrivalTime": { "$ref": "#/components/schemas/UTCTime" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "departureStation": {
            "$ref": "#/components/schemas/PublicTransportStation"
          },
          "departureTime": { "$ref": "#/components/schemas/UTCTime" },
          "description": { "type": "string" },
          "fare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "id": { "type": "string" }
        },
        "required": [
          "id",
          "description",
          "fare",
          "departureTime",
          "arrivalTime",
          "departureStation",
          "arrivalStation",
          "createdAt"
        ],
        "type": "object"
      },
      "PublicTransportStation": {
        "properties": {
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" },
          "name": { "type": "string" },
          "stationCode": { "type": "string" }
        },
        "required": ["name", "stationCode", "lat", "lon"],
        "type": "object"
      },
      "EstimateAPIEntity": {
        "properties": {
          "agencyCompletedRidesCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "agencyName": { "type": "string" },
          "agencyNumber": { "type": "string" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "discount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "discountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "driversLatLong": {
            "items": { "$ref": "#/components/schemas/LatLong" },
            "type": "array"
          },
          "estimateFareBreakup": {
            "items": {
              "$ref": "#/components/schemas/EstimateBreakupAPIEntity"
            },
            "type": "array"
          },
          "estimatedFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "estimatedPickupDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedTotalFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedTotalFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "id": { "type": "string" },
          "isAirConditioned": { "type": "boolean" },
          "isBlockedRoute": { "type": "boolean" },
          "isCustomerPrefferedSearchRoute": { "type": "boolean" },
          "isValueAddNP": { "type": "boolean" },
          "nightShiftInfo": {
            "$ref": "#/components/schemas/NightShiftInfoAPIEntity"
          },
          "nightShiftRate": {
            "$ref": "#/components/schemas/NightShiftRateAPIEntity"
          },
          "providerDescription": { "type": "string" },
          "providerId": { "type": "string" },
          "providerLogoUrl": { "type": "string" },
          "providerName": { "type": "string" },
          "serviceTierName": { "type": "string" },
          "serviceTierShortDesc": { "type": "string" },
          "specialLocationTag": { "type": "string" },
          "tollChargesInfo": {
            "$ref": "#/components/schemas/TollChargesInfoAPIEntity"
          },
          "totalFareRange": {
            "$ref": "#/components/schemas/FareRangeAPIEntity"
          },
          "tripTerms": { "items": { "type": "string" }, "type": "array" },
          "validTill": { "$ref": "#/components/schemas/UTCTime" },
          "vehicleServiceTierAirConditioned": {
            "format": "double",
            "type": "number"
          },
          "vehicleServiceTierSeatingCapacity": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "vehicleVariant": { "$ref": "#/components/schemas/VehicleVariant" },
          "waitingCharges": {
            "$ref": "#/components/schemas/WaitingChargesAPIEntity"
          }
        },
        "required": [
          "id",
          "vehicleVariant",
          "estimatedFare",
          "estimatedTotalFare",
          "estimatedFareWithCurrency",
          "estimatedTotalFareWithCurrency",
          "totalFareRange",
          "agencyName",
          "agencyNumber",
          "agencyCompletedRidesCount",
          "tripTerms",
          "estimateFareBreakup",
          "waitingCharges",
          "driversLatLong",
          "createdAt",
          "providerName",
          "providerId",
          "isValueAddNP",
          "validTill"
        ],
        "type": "object"
      },
      "VehicleVariant": {
        "enum": [
          "SEDAN",
          "SUV",
          "HATCHBACK",
          "AUTO_RICKSHAW",
          "TAXI",
          "TAXI_PLUS",
          "BIKE",
          "PREMIUM_SEDAN",
          "BLACK",
          "BLACK_XL",
          "AMBULANCE_TAXI",
          "AMBULANCE_TAXI_OXY",
          "AMBULANCE_AC",
          "AMBULANCE_AC_OXY",
          "AMBULANCE_VENTILATOR",
          "SUV_PLUS"
        ],
        "type": "string"
      },
      "FareRangeAPIEntity": {
        "properties": {
          "maxFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "maxFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "minFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "minFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          }
        },
        "required": [
          "minFare",
          "maxFare",
          "minFareWithCurrency",
          "maxFareWithCurrency"
        ],
        "type": "object"
      },
      "EstimateBreakupAPIEntity": {
        "properties": {
          "price": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "priceWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "title": { "type": "string" }
        },
        "required": ["title", "price", "priceWithCurrency"],
        "type": "object"
      },
      "NightShiftRateAPIEntity": {
        "properties": {
          "nightShiftEnd": { "$ref": "#/components/schemas/TimeOfDay" },
          "nightShiftMultiplier": { "$ref": "#/components/schemas/Centesimal" },
          "nightShiftStart": { "$ref": "#/components/schemas/TimeOfDay" }
        },
        "required": ["nightShiftStart", "nightShiftEnd"],
        "type": "object"
      },
      "TollChargesInfoAPIEntity": {
        "properties": {
          "tollChargesWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "tollNames": { "items": { "type": "string" }, "type": "array" }
        },
        "required": ["tollChargesWithCurrency", "tollNames"],
        "type": "object"
      },
      "WaitingChargesAPIEntity": {
        "properties": {
          "waitingChargePerMin": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "waitingChargePerMinWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          }
        },
        "type": "object"
      },
      "PaymentMethodAPIEntity": {
        "properties": {
          "collectedBy": { "$ref": "#/components/schemas/PaymentCollector" },
          "id": { "type": "string" },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          "paymentType": { "$ref": "#/components/schemas/PaymentType" }
        },
        "required": ["id", "paymentType", "paymentInstrument", "collectedBy"],
        "type": "object"
      },
      "PaymentType": {
        "enum": ["ON_FULFILLMENT", "POSTPAID"],
        "type": "string"
      },
      "PaymentInstrument": {
        "oneOf": [
          {
            "properties": {
              "instrumentName": { "$ref": "#/components/schemas/CardType" },
              "instrumentType": { "enum": ["Card"], "type": "string" }
            },
            "required": ["instrumentType", "instrumentName"],
            "type": "object"
          },
          {
            "properties": {
              "instrumentName": { "$ref": "#/components/schemas/WalletType" },
              "instrumentType": { "enum": ["Wallet"], "type": "string" }
            },
            "required": ["instrumentType", "instrumentName"],
            "type": "object"
          },
          {
            "properties": {
              "instrumentType": { "enum": ["UPI"], "type": "string" }
            },
            "required": ["instrumentType"],
            "type": "object"
          },
          {
            "properties": {
              "instrumentType": { "enum": ["NetBanking"], "type": "string" }
            },
            "required": ["instrumentType"],
            "type": "object"
          },
          {
            "properties": {
              "instrumentType": { "enum": ["Cash"], "type": "string" }
            },
            "required": ["instrumentType"],
            "type": "object"
          }
        ]
      },
      "CardType": { "enum": ["DefaultCardType"], "type": "string" },
      "WalletType": { "enum": ["DefaultWalletType"], "type": "string" },
      "PaymentCollector": { "enum": ["BAP", "BPP"], "type": "string" },
      "ConfirmRes": {
        "properties": {
          "bookingId": { "type": "string" },
          "confirmTtl": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["bookingId", "confirmTtl"],
        "type": "object"
      },
      "BookingAPIEntity": {
        "properties": {
          "agencyName": { "type": "string" },
          "agencyNumber": { "type": "string" },
          "bookingDetails": {
            "$ref": "#/components/schemas/BookingAPIDetails"
          },
          "cancellationReason": {
            "$ref": "#/components/schemas/BookingCancellationReasonAPIEntity"
          },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "discount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "discountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "driversPreviousRideDropLocLat": {
            "format": "double",
            "type": "number"
          },
          "driversPreviousRideDropLocLon": {
            "format": "double",
            "type": "number"
          },
          "duration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "estimatedDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedFareBreakup": {
            "items": { "$ref": "#/components/schemas/FareBreakupAPIEntity" },
            "type": "array"
          },
          "estimatedFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "estimatedTotalFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedTotalFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "fareBreakup": {
            "items": { "$ref": "#/components/schemas/FareBreakupAPIEntity" },
            "type": "array"
          },
          "favCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "fromLocation": { "$ref": "#/components/schemas/LocationAPIEntity" },
          "hasDisability": { "type": "boolean" },
          "hasNightIssue": { "type": "boolean" },
          "id": { "type": "string" },
          "initialPickupLocation": {
            "$ref": "#/components/schemas/LocationAPIEntity"
          },
          "isAirConditioned": { "type": "boolean" },
          "isAlreadyFav": { "type": "boolean" },
          "isBookingUpdated": { "type": "boolean" },
          "isScheduled": { "type": "boolean" },
          "isValueAddNP": { "type": "boolean" },
          "merchantExoPhone": { "type": "string" },
          "paymentMethodId": { "type": "string" },
          "paymentUrl": { "type": "string" },
          "rideEndTime": { "$ref": "#/components/schemas/UTCTime" },
          "rideList": {
            "items": { "$ref": "#/components/schemas/RideAPIEntity" },
            "type": "array"
          },
          "rideScheduledTime": { "$ref": "#/components/schemas/UTCTime" },
          "rideStartTime": { "$ref": "#/components/schemas/UTCTime" },
          "serviceTierName": { "type": "string" },
          "serviceTierShortDesc": { "type": "string" },
          "sosStatus": { "$ref": "#/components/schemas/SosStatus" },
          "specialLocationName": { "type": "string" },
          "specialLocationTag": { "type": "string" },
          "status": { "$ref": "#/components/schemas/BookingStatus" },
          "tripTerms": { "items": { "type": "string" }, "type": "array" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" },
          "vehicleServiceTierAirConditioned": {
            "format": "double",
            "type": "number"
          },
          "vehicleServiceTierSeatingCapacity": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "vehicleServiceTierType": {
            "$ref": "#/components/schemas/VehicleServiceTierType"
          }
        },
        "required": [
          "id",
          "status",
          "agencyName",
          "estimatedFare",
          "isBookingUpdated",
          "estimatedTotalFare",
          "estimatedFareWithCurrency",
          "estimatedTotalFareWithCurrency",
          "fromLocation",
          "initialPickupLocation",
          "rideList",
          "hasNightIssue",
          "tripTerms",
          "estimatedFareBreakup",
          "fareBreakup",
          "bookingDetails",
          "rideScheduledTime",
          "merchantExoPhone",
          "createdAt",
          "updatedAt",
          "isValueAddNP",
          "vehicleServiceTierType",
          "isScheduled"
        ],
        "type": "object"
      },
      "BookingStatus": {
        "enum": [
          "NEW",
          "CONFIRMED",
          "AWAITING_REASSIGNMENT",
          "REALLOCATED",
          "COMPLETED",
          "CANCELLED",
          "TRIP_ASSIGNED"
        ],
        "type": "string"
      },
      "RideAPIEntity": {
        "properties": {
          "allowedEditLocationAttempts": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "allowedEditPickupLocationAttempts": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "bppRideId": { "type": "string" },
          "chargeableRideDistance": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "chargeableRideDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "computedPrice": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "computedPriceWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "driverArrivalTime": { "$ref": "#/components/schemas/UTCTime" },
          "driverImage": { "type": "string" },
          "driverName": { "type": "string" },
          "driverNumber": { "type": "string" },
          "driverRatings": { "$ref": "#/components/schemas/Centesimal" },
          "driverRegisteredAt": { "$ref": "#/components/schemas/UTCTime" },
          "endOdometerReading": { "$ref": "#/components/schemas/Centesimal" },
          "endOtp": { "type": "string" },
          "favCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "id": { "type": "string" },
          "isAlreadyFav": { "type": "boolean" },
          "isFreeRide": { "type": "boolean" },
          "onlinePayment": { "type": "boolean" },
          "rideEndTime": { "$ref": "#/components/schemas/UTCTime" },
          "rideOtp": { "type": "string" },
          "rideRating": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "rideStartTime": { "$ref": "#/components/schemas/UTCTime" },
          "shortRideId": { "type": "string" },
          "startOdometerReading": { "$ref": "#/components/schemas/Centesimal" },
          "status": { "$ref": "#/components/schemas/RideStatus" },
          "tollConfidence": { "$ref": "#/components/schemas/Confidence" },
          "traveledRideDistance": { "$ref": "#/components/schemas/Distance" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" },
          "vehicleAge": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "vehicleColor": { "type": "string" },
          "vehicleModel": { "type": "string" },
          "vehicleNumber": { "type": "string" },
          "vehicleServiceTierType": {
            "$ref": "#/components/schemas/VehicleServiceTierType"
          },
          "vehicleVariant": { "$ref": "#/components/schemas/VehicleVariant" }
        },
        "required": [
          "allowedEditLocationAttempts",
          "allowedEditPickupLocationAttempts",
          "bppRideId",
          "createdAt",
          "driverName",
          "id",
          "onlinePayment",
          "rideOtp",
          "shortRideId",
          "status",
          "updatedAt",
          "vehicleColor",
          "vehicleModel",
          "vehicleNumber",
          "vehicleVariant"
        ],
        "type": "object"
      },
      "RideStatus": {
        "enum": ["UPCOMING", "NEW", "INPROGRESS", "COMPLETED", "CANCELLED"],
        "type": "string"
      },
      "Confidence": { "enum": ["Sure", "Unsure", "Neutral"], "type": "string" },
      "FareBreakupAPIEntity": {
        "properties": {
          "amount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "amountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "description": { "type": "string" }
        },
        "required": ["amount", "amountWithCurrency", "description"],
        "type": "object"
      },
      "BookingAPIDetails": {
        "oneOf": [
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/OneWayBookingAPIDetails"
              },
              "fareProductType": { "enum": ["ONE_WAY"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/RentalBookingAPIDetails"
              },
              "fareProductType": { "enum": ["RENTAL"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/OneWayBookingAPIDetails"
              },
              "fareProductType": { "enum": ["DRIVER_OFFER"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/OneWaySpecialZoneBookingAPIDetails"
              },
              "fareProductType": {
                "enum": ["OneWaySpecialZoneAPIDetails"],
                "type": "string"
              }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/InterCityBookingAPIDetails"
              },
              "fareProductType": { "enum": ["INTER_CITY"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/AmbulanceBookingAPIDetails"
              },
              "fareProductType": { "enum": ["AMBULANCE"], "type": "string" }
            },
            "required": ["fareProductType", "contents"],
            "type": "object"
          }
        ]
      },
      "OneWayBookingAPIDetails": {
        "properties": {
          "estimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "toLocation": { "$ref": "#/components/schemas/LocationAPIEntity" }
        },
        "required": [
          "toLocation",
          "estimatedDistance",
          "estimatedDistanceWithUnit"
        ],
        "type": "object"
      },
      "RentalBookingAPIDetails": {
        "properties": {
          "otpCode": { "type": "string" },
          "stopLocation": { "$ref": "#/components/schemas/LocationAPIEntity" }
        },
        "type": "object"
      },
      "OneWaySpecialZoneBookingAPIDetails": {
        "properties": {
          "estimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "otpCode": { "type": "string" },
          "toLocation": { "$ref": "#/components/schemas/LocationAPIEntity" }
        },
        "required": [
          "toLocation",
          "estimatedDistance",
          "estimatedDistanceWithUnit"
        ],
        "type": "object"
      },
      "InterCityBookingAPIDetails": {
        "properties": {
          "estimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "otpCode": { "type": "string" },
          "toLocation": { "$ref": "#/components/schemas/LocationAPIEntity" }
        },
        "required": [
          "toLocation",
          "estimatedDistance",
          "estimatedDistanceWithUnit"
        ],
        "type": "object"
      },
      "AmbulanceBookingAPIDetails": {
        "properties": {
          "estimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "toLocation": { "$ref": "#/components/schemas/LocationAPIEntity" }
        },
        "required": [
          "toLocation",
          "estimatedDistance",
          "estimatedDistanceWithUnit"
        ],
        "type": "object"
      },
      "SosStatus": {
        "enum": [
          "Resolved",
          "NotResolved",
          "Pending",
          "MockPending",
          "MockResolved"
        ],
        "type": "string"
      },
      "BookingCancellationReasonAPIEntity": {
        "properties": {
          "additionalInfo": { "type": "string" },
          "reasonCode": {
            "$ref": "#/components/schemas/CancellationReasonCode"
          },
          "reasonStage": { "$ref": "#/components/schemas/CancellationStage" },
          "source": { "$ref": "#/components/schemas/CancellationSource" }
        },
        "required": ["source"],
        "type": "object"
      },
      "CancellationReasonCode": { "type": "string" },
      "CancellationStage": {
        "enum": ["OnSearch", "OnInit", "OnConfirm", "OnAssign"],
        "type": "string"
      },
      "CancellationSource": {
        "enum": [
          "ByUser",
          "ByDriver",
          "ByMerchant",
          "ByAllocator",
          "ByApplication"
        ],
        "type": "string"
      },
      "BookingStatusAPIEntity": {
        "properties": {
          "bookingStatus": { "$ref": "#/components/schemas/BookingStatus" },
          "id": { "type": "string" },
          "isBookingUpdated": { "type": "boolean" },
          "rideStatus": { "$ref": "#/components/schemas/RideStatus" }
        },
        "required": ["id", "isBookingUpdated", "bookingStatus"],
        "type": "object"
      },
      "BookingListRes": {
        "properties": {
          "list": {
            "items": { "$ref": "#/components/schemas/BookingAPIEntity" },
            "type": "array"
          }
        },
        "required": ["list"],
        "type": "object"
      },
      "FavouriteBookingListRes": {
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/FavouriteBookingAPIEntity"
            },
            "type": "array"
          }
        },
        "required": ["list"],
        "type": "object"
      },
      "FavouriteBookingAPIEntity": {
        "properties": {
          "fromLocation": { "$ref": "#/components/schemas/Location" },
          "id": { "type": "string" },
          "rideRating": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "startTime": { "$ref": "#/components/schemas/UTCTime" },
          "toLocation": { "$ref": "#/components/schemas/Location" },
          "totalFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["id", "fromLocation"],
        "type": "object"
      },
      "Location": {
        "properties": {
          "address": { "$ref": "#/components/schemas/LocationAddress" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "id": { "type": "string" },
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": ["id", "lat", "lon", "address", "createdAt", "updatedAt"],
        "type": "object"
      },
      "DriverNo": {
        "properties": { "driverNumber": { "type": "string" } },
        "required": ["driverNumber"],
        "type": "object"
      },
      "StopReq": {
        "properties": {
          "address": { "$ref": "#/components/schemas/LocationAddress" },
          "gps": { "$ref": "#/components/schemas/LatLong" }
        },
        "required": ["gps", "address"],
        "type": "object"
      },
      "CancellationDuesDetailsRes": {
        "properties": {
          "canBlockCustomer": { "type": "boolean" },
          "cancellationDues": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "disputeChancesUsed": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CancelReq": {
        "properties": {
          "additionalInfo": { "type": "string" },
          "reallocate": { "type": "boolean" },
          "reasonCode": {
            "$ref": "#/components/schemas/CancellationReasonCode"
          },
          "reasonStage": { "$ref": "#/components/schemas/CancellationStage" }
        },
        "required": ["reasonCode", "reasonStage"],
        "type": "object"
      },
      "GetDriverLocResp": {
        "properties": {
          "lastUpdate": { "$ref": "#/components/schemas/UTCTime" },
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" }
        },
        "required": ["lat", "lon", "lastUpdate"],
        "type": "object"
      },
      "GetRideStatusResp": {
        "properties": {
          "customer": { "$ref": "#/components/schemas/PersonAPIEntity" },
          "driverPosition": { "$ref": "#/components/schemas/LatLong" },
          "fromLocation": { "$ref": "#/components/schemas/LocationAPIEntity" },
          "ride": { "$ref": "#/components/schemas/RideAPIEntity" },
          "toLocation": { "$ref": "#/components/schemas/LocationAPIEntity" }
        },
        "required": ["fromLocation", "ride", "customer"],
        "type": "object"
      },
      "EditLocationResp": {
        "properties": {
          "bookingUpdateRequestId": { "type": "string" },
          "result": { "type": "string" }
        },
        "required": ["result"],
        "type": "object"
      },
      "EditLocationReq": {
        "properties": {
          "destination": { "$ref": "#/components/schemas/EditLocation" },
          "origin": { "$ref": "#/components/schemas/EditLocation" }
        },
        "type": "object"
      },
      "EditLocation": {
        "properties": {
          "address": { "$ref": "#/components/schemas/LocationAddress" },
          "gps": { "$ref": "#/components/schemas/LatLong" }
        },
        "required": ["gps", "address"],
        "type": "object"
      },
      "CallRes": {
        "properties": { "callId": { "type": "string" } },
        "required": ["callId"],
        "type": "object"
      },
      "CallStatusAPIEntity": {
        "properties": {
          "callStatusId": { "type": "string" },
          "rideId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/CallStatus" }
        },
        "required": ["callStatusId", "status"],
        "type": "object"
      },
      "CallStatus": {
        "enum": [
          "QUEUED",
          "RINGING",
          "IN_PROGRESS",
          "COMPLETED",
          "FAILED",
          "BUSY",
          "NO_ANSWER",
          "CANCELED",
          "INVALID_STATUS",
          "CONNECTED",
          "NOT_CONNECTED",
          "ATTEMPTED",
          "MISSED"
        ],
        "type": "string"
      },
      "AckResponse": { "enum": ["Ack"], "type": "string" },
      "ExotelCallCallbackReq_CallAttachments": {
        "properties": {
          "callSid": { "type": "string" },
          "conversationDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "customField": { "$ref": "#/components/schemas/CallAttachments" },
          "dateCreated": { "type": "string" },
          "dateUpdated": { "type": "string" },
          "direction": { "$ref": "#/components/schemas/ExotelDirection" },
          "endTime": { "type": "string" },
          "eventType": { "type": "string" },
          "from": { "type": "string" },
          "legs": {
            "items": { "$ref": "#/components/schemas/ExotelLeg" },
            "type": "array"
          },
          "phoneNumberSid": { "type": "string" },
          "recordingUrl": { "type": "string" },
          "startTime": { "type": "string" },
          "status": { "$ref": "#/components/schemas/ExotelCallStatus" },
          "to": { "type": "string" }
        },
        "required": [
          "callSid",
          "eventType",
          "dateCreated",
          "dateUpdated",
          "from",
          "to",
          "status",
          "phoneNumberSid",
          "startTime",
          "endTime",
          "direction",
          "recordingUrl",
          "conversationDuration",
          "legs",
          "customField"
        ],
        "type": "object"
      },
      "ExotelCallStatus": {
        "enum": [
          "QUEUED",
          "RINGING",
          "IN_PROGRESS",
          "COMPLETED",
          "FAILED",
          "BUSY",
          "NO_ANSWER",
          "CANCELED",
          "INVALID_STATUS",
          "CONNECTED",
          "NOT_CONNECTED",
          "MISSED",
          "ATTEMPTED"
        ],
        "type": "string"
      },
      "ExotelDirection": {
        "enum": ["INBOUND", "OUTBOUND_DIAL", "OUTBOUND_API"],
        "type": "string"
      },
      "ExotelLeg": {
        "properties": {
          "onCallDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "status": { "$ref": "#/components/schemas/ExotelCallStatus" }
        },
        "required": ["onCallDuration", "status"],
        "type": "object"
      },
      "CallAttachments": {
        "properties": {
          "callStatusId": { "type": "string" },
          "rideId": { "type": "string" }
        },
        "required": ["callStatusId", "rideId"],
        "type": "object"
      },
      "SendIssueReq": {
        "properties": {
          "contactEmail": { "type": "string" },
          "issue": { "$ref": "#/components/schemas/Issue" },
          "nightSafety": { "type": "boolean" },
          "rideBookingId": { "type": "string" }
        },
        "required": ["issue"],
        "type": "object"
      },
      "Issue": {
        "properties": {
          "bookingId": { "type": "string" },
          "contactEmail": { "type": "string" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "customerId": { "type": "string" },
          "description": { "type": "string" },
          "firstName": { "type": "string" },
          "id": { "type": "string" },
          "lastName": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "reason": { "type": "string" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": [
          "id",
          "customerId",
          "reason",
          "description",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "SafetyCheckSupportReq": {
        "properties": {
          "bookingId": { "type": "string" },
          "description": { "type": "string" },
          "isSafe": { "type": "boolean" }
        },
        "required": ["bookingId", "isSafe", "description"],
        "type": "object"
      },
      "GetRoutesReq": {
        "properties": {
          "calcPoints": { "type": "boolean" },
          "mode": { "$ref": "#/components/schemas/TravelMode" },
          "waypoints": {
            "items": { "$ref": "#/components/schemas/LatLong" },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["waypoints", "calcPoints"],
        "type": "object"
      },
      "TravelMode": {
        "enum": ["CAR", "MOTORCYCLE", "BICYCLE", "FOOT"],
        "type": "string"
      },
      "ServiceabilityRes": {
        "properties": {
          "blockRadius": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "city": { "$ref": "#/components/schemas/City" },
          "currentCity": { "$ref": "#/components/schemas/City" },
          "geoJson": { "type": "string" },
          "hotSpotInfo": {
            "items": { "$ref": "#/components/schemas/HotSpotInfo" },
            "type": "array"
          },
          "serviceable": { "type": "boolean" },
          "specialLocation": {
            "$ref": "#/components/schemas/SpecialLocationFull"
          }
        },
        "required": ["serviceable", "hotSpotInfo"],
        "type": "object"
      },
      "City": {
        "enum": [
          "Bangalore",
          "Kolkata",
          "Paris",
          "Kochi",
          "Delhi",
          "Hyderabad",
          "Mumbai",
          "Chennai",
          "TamilNaduCities",
          "Mysore",
          "Pondicherry",
          "Pune",
          "Tumakuru",
          "Noida",
          "Gurugram",
          "Tirunelveli",
          "Thanjavur",
          "Vellore",
          "Madurai",
          "Salem",
          "Hosur",
          "Trichy",
          "Minneapolis",
          "Trivandrum",
          "Thrissur",
          "Kozhikode",
          "Chandigarh",
          "Jaipur",
          "Siliguri",
          "Asansol",
          "Gangtok",
          "Darjeeling",
          "Davanagere",
          "Shivamogga",
          "Hubli",
          "Mangalore",
          "Udupi",
          "Gulbarga",
          "AnyCity"
        ],
        "type": "string"
      },
      "SpecialLocationFull": {
        "properties": {
          "category": { "type": "string" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "gates": {
            "items": { "$ref": "#/components/schemas/GatesInfo" },
            "type": "array"
          },
          "gatesInfo": {
            "items": { "$ref": "#/components/schemas/GateInfoFull" },
            "type": "array"
          },
          "geoJson": { "type": "string" },
          "id": { "type": "string" },
          "locationName": { "type": "string" },
          "merchantOperatingCityId": { "type": "string" }
        },
        "required": [
          "id",
          "locationName",
          "category",
          "gatesInfo",
          "gates",
          "createdAt"
        ],
        "type": "object"
      },
      "GateInfoFull": {
        "properties": {
          "address": { "type": "string" },
          "canQueueUpOnGate": { "type": "boolean" },
          "defaultDriverExtra": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "geoJson": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "point": { "$ref": "#/components/schemas/LatLong" },
          "specialLocationId": { "type": "string" }
        },
        "required": [
          "id",
          "specialLocationId",
          "point",
          "name",
          "canQueueUpOnGate"
        ],
        "type": "object"
      },
      "GatesInfo": {
        "properties": {
          "address": { "type": "string" },
          "name": { "type": "string" },
          "point": { "$ref": "#/components/schemas/LatLong" }
        },
        "required": ["point", "name"],
        "type": "object"
      },
      "HotSpotInfo": {
        "properties": {
          "_address": { "$ref": "#/components/schemas/LocationAddress" },
          "_centroidLatLong": { "$ref": "#/components/schemas/LatLong" },
          "_geoHash": { "type": "string" }
        },
        "required": ["_geoHash", "_centroidLatLong"],
        "type": "object"
      },
      "ServiceabilityReq": {
        "properties": {
          "location": { "$ref": "#/components/schemas/LatLong" }
        },
        "required": ["location"],
        "type": "object"
      },
      "FeedbackReq": {
        "properties": {
          "feedbackDetails": { "type": "string" },
          "ratingValue": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "rideId": { "type": "string" },
          "wasOfferedAssistance": { "type": "boolean" }
        },
        "required": ["rideId", "ratingValue"],
        "type": "object"
      },
      "DriverProfileResponse": {
        "properties": {
          "response": { "$ref": "#/components/schemas/DriverProfileRes" }
        },
        "type": "object"
      },
      "DriverProfileRes": {
        "properties": {
          "approvalRate": { "$ref": "#/components/schemas/Centesimal" },
          "cancellation": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "certificates": { "items": { "type": "string" }, "type": "array" },
          "driverName": { "type": "string" },
          "expertAt": { "items": { "type": "string" }, "type": "array" },
          "languages": { "items": { "type": "string" }, "type": "array" },
          "likedByRidersNum": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "onboardedAt": { "$ref": "#/components/schemas/UTCTime" },
          "pledges": { "items": { "type": "string" }, "type": "array" },
          "trips": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "whyNY": { "items": { "type": "string" }, "type": "array" }
        },
        "required": [
          "certificates",
          "driverName",
          "likedByRidersNum",
          "trips",
          "cancellation",
          "onboardedAt",
          "pledges",
          "expertAt",
          "whyNY",
          "languages"
        ],
        "type": "object"
      },
      "FeedbackFormList": {
        "properties": {
          "_data": {
            "items": { "$ref": "#/components/schemas/FeedbackFormAPIEntity" },
            "type": "array"
          }
        },
        "required": ["_data"],
        "type": "object"
      },
      "FeedbackFormAPIEntity": {
        "properties": {
          "categoryName": { "$ref": "#/components/schemas/Category" },
          "feedbackForm": {
            "items": { "$ref": "#/components/schemas/FeedbackFormItem" },
            "type": "array"
          }
        },
        "required": ["categoryName", "feedbackForm"],
        "type": "object"
      },
      "Category": { "enum": ["RIDE", "DRIVER", "VEHICLE"], "type": "string" },
      "FeedbackFormItem": {
        "properties": {
          "answer": { "items": { "type": "string" }, "type": "array" },
          "answerType": { "$ref": "#/components/schemas/AnswerType" },
          "id": { "type": "string" },
          "question": { "type": "string" },
          "rating": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["answer", "answerType", "id", "question"],
        "type": "object"
      },
      "AnswerType": { "enum": ["Text", "Checkbox", "Radio"], "type": "string" },
      "FeedbackFormReq": {
        "properties": {
          "feedback": {
            "items": { "$ref": "#/components/schemas/FeedbackAnswer" },
            "type": "array"
          },
          "rideId": { "type": "string" }
        },
        "required": ["feedback", "rideId"],
        "type": "object"
      },
      "FeedbackAnswer": {
        "properties": {
          "answer": { "items": { "type": "string" }, "type": "array" },
          "questionId": { "type": "string" }
        },
        "required": ["answer", "questionId"],
        "type": "object"
      },
      "AutoCompleteResp": {
        "properties": {
          "predictions": {
            "items": { "$ref": "#/components/schemas/Prediction" },
            "type": "array"
          }
        },
        "required": ["predictions"],
        "type": "object"
      },
      "Prediction": {
        "properties": {
          "description": { "type": "string" },
          "distance": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "distanceWithUnit": { "$ref": "#/components/schemas/Distance" },
          "placeId": { "type": "string" },
          "types": { "items": { "type": "string" }, "type": "array" }
        },
        "required": ["description"],
        "type": "object"
      },
      "AutoCompleteReq": {
        "properties": {
          "autoCompleteType": {
            "$ref": "#/components/schemas/AutoCompleteType"
          },
          "input": { "type": "string" },
          "language": { "$ref": "#/components/schemas/Language" },
          "location": { "type": "string" },
          "origin": { "$ref": "#/components/schemas/LatLong" },
          "radius": { "type": "integer" },
          "radiusWithUnit": { "$ref": "#/components/schemas/Distance" },
          "sessionToken": { "type": "string" },
          "strictbounds": { "type": "boolean" },
          "types_": { "type": "string" }
        },
        "required": ["input", "location", "radius", "language"],
        "type": "object"
      },
      "AutoCompleteType": { "enum": ["PICKUP", "DROP"], "type": "string" },
      "GetPlaceDetailsResp": {
        "properties": {
          "location": { "$ref": "#/components/schemas/LatLong" }
        },
        "required": ["location"],
        "type": "object"
      },
      "GetPlaceDetailsReq": {
        "properties": {
          "placeId": { "type": "string" },
          "sessionToken": { "type": "string" }
        },
        "required": ["placeId"],
        "type": "object"
      },
      "PlaceName": {
        "properties": {
          "addressComponents": {
            "items": { "$ref": "#/components/schemas/AddressResp" },
            "type": "array"
          },
          "formattedAddress": { "type": "string" },
          "location": { "$ref": "#/components/schemas/LatLong" },
          "placeId": { "type": "string" },
          "plusCode": { "type": "string" }
        },
        "required": ["addressComponents", "location"],
        "type": "object"
      },
      "AddressResp": {
        "properties": {
          "longName": { "type": "string" },
          "shortName": { "type": "string" },
          "types": { "items": { "type": "string" }, "type": "array" }
        },
        "required": ["longName", "shortName", "types"],
        "type": "object"
      },
      "GetPlaceNameReq": {
        "properties": {
          "getBy": { "$ref": "#/components/schemas/GetPlaceNameBy" },
          "language": { "$ref": "#/components/schemas/Language" },
          "sessionToken": { "type": "string" }
        },
        "required": ["getBy"],
        "type": "object"
      },
      "GetPlaceNameBy": {
        "oneOf": [
          {
            "properties": {
              "contents": { "$ref": "#/components/schemas/LatLong" },
              "tag": { "enum": ["ByLatLong"], "type": "string" }
            },
            "required": ["tag", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": { "type": "string" },
              "tag": { "enum": ["ByPlaceId"], "type": "string" }
            },
            "required": ["tag", "contents"],
            "type": "object"
          }
        ]
      },
      "TranslateResp": {
        "properties": {
          "_data": { "$ref": "#/components/schemas/Translations" },
          "_error": { "$ref": "#/components/schemas/TranslateError" }
        },
        "required": ["_data"],
        "type": "object"
      },
      "Translations": {
        "properties": {
          "translations": {
            "items": { "$ref": "#/components/schemas/TranslatedText" },
            "type": "array"
          }
        },
        "required": ["translations"],
        "type": "object"
      },
      "TranslatedText": {
        "properties": { "translatedText": { "type": "string" } },
        "required": ["translatedText"],
        "type": "object"
      },
      "TranslateError": {
        "properties": { "code": { "type": "string" } },
        "required": ["code"],
        "type": "object"
      },
      "CancellationReasonAPIEntity": {
        "properties": {
          "description": { "type": "string" },
          "reasonCode": {
            "$ref": "#/components/schemas/CancellationReasonCode"
          }
        },
        "required": ["reasonCode", "description"],
        "type": "object"
      },
      "CreateSavedReqLocationReq": {
        "properties": {
          "area": { "type": "string" },
          "areaCode": { "type": "string" },
          "building": { "type": "string" },
          "city": { "type": "string" },
          "country": { "type": "string" },
          "door": { "type": "string" },
          "isMoved": { "type": "boolean" },
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" },
          "placeId": { "type": "string" },
          "state": { "type": "string" },
          "street": { "type": "string" },
          "tag": { "type": "string" },
          "ward": { "type": "string" }
        },
        "required": ["lat", "lon", "tag"],
        "type": "object"
      },
      "SavedReqLocationsListRes": {
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/SavedReqLocationAPIEntity"
            },
            "type": "array"
          }
        },
        "required": ["list"],
        "type": "object"
      },
      "SavedReqLocationAPIEntity": {
        "properties": {
          "area": { "type": "string" },
          "areaCode": { "type": "string" },
          "building": { "type": "string" },
          "city": { "type": "string" },
          "country": { "type": "string" },
          "door": { "type": "string" },
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" },
          "placeId": { "type": "string" },
          "state": { "type": "string" },
          "street": { "type": "string" },
          "tag": { "type": "string" },
          "ward": { "type": "string" }
        },
        "required": ["lat", "lon", "tag"],
        "type": "object"
      },
      "GetPersonFlowStatusRes": {
        "properties": {
          "currentStatus": { "$ref": "#/components/schemas/FlowStatus" },
          "isValueAddNP": { "type": "boolean" },
          "oldStatus": { "$ref": "#/components/schemas/FlowStatus" }
        },
        "required": ["currentStatus"],
        "type": "object"
      },
      "FlowStatus": {
        "oneOf": [
          {
            "properties": { "status": { "enum": ["IDLE"], "type": "string" } },
            "required": ["status"],
            "type": "object"
          },
          {
            "properties": {
              "estimateId": { "type": "string" },
              "otherSelectedEstimates": {
                "items": { "type": "string" },
                "type": "array"
              },
              "providerId": { "type": "string" },
              "status": {
                "enum": ["WAITING_FOR_DRIVER_OFFERS"],
                "type": "string"
              },
              "validTill": { "$ref": "#/components/schemas/UTCTime" }
            },
            "required": ["estimateId", "validTill", "status"],
            "type": "object"
          },
          {
            "properties": {
              "bookingId": { "type": "string" },
              "fareProductType": {
                "$ref": "#/components/schemas/FareProductType"
              },
              "status": {
                "enum": ["WAITING_FOR_DRIVER_ASSIGNMENT"],
                "type": "string"
              },
              "validTill": { "$ref": "#/components/schemas/UTCTime" }
            },
            "required": ["bookingId", "validTill", "status"],
            "type": "object"
          }
        ]
      },
      "FareProductType": {
        "enum": [
          "ONE_WAY",
          "RENTAL",
          "DRIVER_OFFER",
          "ONE_WAY_SPECIAL_ZONE",
          "INTER_CITY",
          "AMBULANCE"
        ],
        "type": "string"
      },
      "NotifyEventReq": {
        "properties": {
          "event": { "$ref": "#/components/schemas/FrontendEvent" }
        },
        "required": ["event"],
        "type": "object"
      },
      "FrontendEvent": {
        "enum": ["RATE_DRIVER_SKIPPED", "SEARCH_CANCELLED"],
        "type": "string"
      },
      "OptAPIRequest": {
        "properties": {
          "status": { "$ref": "#/components/schemas/OptApiMethods" }
        },
        "required": ["status"],
        "type": "object"
      },
      "AddSosVideoRes": {
        "properties": { "fileUrl": { "type": "string" } },
        "required": ["fileUrl"],
        "type": "object"
      },
      "CallEventReq": {
        "properties": {
          "callType": { "type": "string" },
          "exophoneNumber": { "type": "string" },
          "rideId": { "type": "string" }
        },
        "required": ["rideId", "callType", "exophoneNumber"],
        "type": "object"
      },
      "AppInstallsReq": {
        "properties": {
          "appVersion": { "$ref": "#/components/schemas/Version" },
          "bundleVersion": { "$ref": "#/components/schemas/Version" },
          "deviceToken": { "type": "string" },
          "merchantId": { "type": "string" },
          "platform": { "type": "string" },
          "source": { "type": "string" }
        },
        "required": ["deviceToken", "merchantId"],
        "type": "object"
      },
      "PersonStatsRes": {
        "properties": {
          "commonAppUseCase": { "$ref": "#/components/schemas/AppUseCase" },
          "email": { "type": "string" },
          "emergencyContactsNum": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "favoriteLocationsNum": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "frequencyCategory": {
            "$ref": "#/components/schemas/FrequencyCategory"
          },
          "isBlocked": { "type": "boolean" },
          "isChurnedUser": { "type": "boolean" },
          "isWhatsAppOptInStatus": { "type": "boolean" },
          "lastRideTaken": { "$ref": "#/components/schemas/UTCTime" },
          "latestSearch": { "$ref": "#/components/schemas/UTCTime" },
          "latestSearchFrom": { "$ref": "#/components/schemas/LatLong" },
          "lifetimeRides": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "offPeakRidesRate": { "format": "float", "type": "number" },
          "overalCancellationRate": { "format": "float", "type": "number" },
          "riderId": { "type": "string" },
          "signupDate": { "$ref": "#/components/schemas/UTCTime" },
          "userCancellationRate": { "format": "float", "type": "number" },
          "userCategory": { "$ref": "#/components/schemas/UserCategory" },
          "weekdayEveningPeakRidesRate": {
            "format": "float",
            "type": "number"
          },
          "weekdayMorningPeakRidesRate": {
            "format": "float",
            "type": "number"
          },
          "weekdayRidesRate": { "format": "float", "type": "number" },
          "weekendPeakRideRate": { "format": "float", "type": "number" },
          "weekendRidesRate": { "format": "float", "type": "number" }
        },
        "required": [
          "riderId",
          "signupDate",
          "isWhatsAppOptInStatus",
          "lifetimeRides",
          "userCancellationRate",
          "frequencyCategory",
          "isChurnedUser",
          "userCategory",
          "isBlocked",
          "emergencyContactsNum",
          "overalCancellationRate",
          "favoriteLocationsNum",
          "weekdayMorningPeakRidesRate",
          "weekdayEveningPeakRidesRate",
          "offPeakRidesRate",
          "weekendRidesRate",
          "weekdayRidesRate",
          "weekendPeakRideRate",
          "commonAppUseCase"
        ],
        "type": "object"
      },
      "FrequencyCategory": {
        "enum": ["HIGH", "MID", "LOW", "ZERO"],
        "type": "string"
      },
      "UserCategory": {
        "enum": ["POWER", "REGULAR", "IRREGULAR", "RARE"],
        "type": "string"
      },
      "AppUseCase": {
        "enum": ["WEEKDAY", "WEEKEND", "OCCASIONAL", "MISCELLANEOUS"],
        "type": "string"
      },
      "HotSpotResponse": {
        "properties": {
          "blockRadius": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "hotSpotInfo": {
            "items": { "$ref": "#/components/schemas/HotSpotInfo" },
            "type": "array"
          }
        },
        "required": ["hotSpotInfo"],
        "type": "object"
      },
      "AadhaarVerificationResp": {
        "properties": {
          "message": { "type": "string" },
          "requestId": { "type": "string" },
          "statusCode": { "type": "string" },
          "transactionId": { "type": "string" }
        },
        "required": ["statusCode", "message", "requestId"],
        "type": "object"
      },
      "AadhaarOtpReq": {
        "properties": {
          "aadhaarNumber": { "type": "string" },
          "consent": { "type": "string" }
        },
        "required": ["aadhaarNumber", "consent"],
        "type": "object"
      },
      "AadhaarOtpVerifyRes": {
        "properties": {
          "code": { "type": "string" },
          "date_of_birth": { "type": "string" },
          "gender": { "type": "string" },
          "image": { "type": "string" },
          "message": { "type": "string" },
          "name": { "type": "string" },
          "request_id": { "type": "string" },
          "share_code": { "type": "string" },
          "transactionId": { "type": "string" }
        },
        "required": [
          "transactionId",
          "message",
          "code",
          "name",
          "gender",
          "date_of_birth",
          "share_code",
          "image",
          "request_id"
        ],
        "type": "object"
      },
      "VerifyAadhaarOtpReq": {
        "properties": {
          "otp": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "shareCode": { "type": "string" }
        },
        "required": ["otp", "shareCode"],
        "type": "object"
      },
      "IssueReportRes": {
        "properties": {
          "issueReportId": { "type": "string" },
          "issueReportShortId": { "type": "string" },
          "messages": {
            "items": { "$ref": "#/components/schemas/Message" },
            "type": "array"
          }
        },
        "required": ["issueReportId", "messages"],
        "type": "object"
      },
      "Message": {
        "properties": {
          "id": { "type": "string" },
          "label": { "type": "string" },
          "mediaFileUrls": { "items": { "type": "string" }, "type": "array" },
          "message": { "type": "string" },
          "messageAction": { "type": "string" },
          "messageTitle": { "type": "string" },
          "referenceCategoryId": { "type": "string" },
          "referenceOptionId": { "type": "string" }
        },
        "required": ["id", "message", "mediaFileUrls", "label"],
        "type": "object"
      },
      "IssueReportReq": {
        "properties": {
          "categoryId": { "type": "string" },
          "chats": {
            "items": { "$ref": "#/components/schemas/Chat" },
            "type": "array"
          },
          "createTicket": { "type": "boolean" },
          "description": { "type": "string" },
          "mediaFiles": { "items": { "type": "string" }, "type": "array" },
          "optionId": { "type": "string" },
          "rideId": { "type": "string" }
        },
        "required": ["mediaFiles", "categoryId", "description"],
        "type": "object"
      },
      "Chat": {
        "properties": {
          "chatId": { "type": "string" },
          "chatType": { "$ref": "#/components/schemas/ChatType" },
          "timestamp": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": ["chatType", "chatId", "timestamp"],
        "type": "object"
      },
      "ChatType": {
        "enum": [
          "IssueMessage",
          "IssueOption",
          "MediaFile",
          "IssueDescription"
        ],
        "type": "string"
      },
      "IssueReportListRes": {
        "properties": {
          "issues": {
            "items": { "$ref": "#/components/schemas/IssueReportListItem" },
            "type": "array"
          }
        },
        "required": ["issues"],
        "type": "object"
      },
      "IssueReportListItem": {
        "properties": {
          "assignee": { "type": "string" },
          "category": { "type": "string" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "deleted": { "type": "boolean" },
          "issueReportId": { "type": "string" },
          "issueReportShortId": { "type": "string" },
          "personId": { "type": "string" },
          "rideId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/IssueStatus" }
        },
        "required": [
          "issueReportId",
          "personId",
          "deleted",
          "category",
          "status",
          "createdAt"
        ],
        "type": "object"
      },
      "IssueStatus": {
        "enum": [
          "OPEN",
          "PENDING_INTERNAL",
          "PENDING_EXTERNAL",
          "RESOLVED",
          "CLOSED",
          "REOPENED",
          "NOT_APPLICABLE"
        ],
        "type": "string"
      },
      "IssueMediaUploadRes": {
        "properties": { "fileId": { "type": "string" } },
        "required": ["fileId"],
        "type": "object"
      },
      "IssueCategoryListRes": {
        "properties": {
          "categories": {
            "items": { "$ref": "#/components/schemas/IssueCategoryRes" },
            "type": "array"
          }
        },
        "required": ["categories"],
        "type": "object"
      },
      "IssueCategoryRes": {
        "properties": {
          "category": { "type": "string" },
          "issueCategoryId": { "type": "string" },
          "label": { "type": "string" }
        },
        "required": ["issueCategoryId", "label", "category"],
        "type": "object"
      },
      "CategoryType": { "enum": ["Category", "FAQ"], "type": "string" },
      "IssueOptionListRes": {
        "properties": {
          "messages": {
            "items": { "$ref": "#/components/schemas/Message" },
            "type": "array"
          },
          "options": {
            "items": { "$ref": "#/components/schemas/IssueOptionRes" },
            "type": "array"
          }
        },
        "required": ["options", "messages"],
        "type": "object"
      },
      "IssueOptionRes": {
        "properties": {
          "issueOptionId": { "type": "string" },
          "label": { "type": "string" },
          "option": { "type": "string" }
        },
        "required": ["issueOptionId", "label", "option"],
        "type": "object"
      },
      "IssueInfoRes": {
        "properties": {
          "assignee": { "type": "string" },
          "category": { "type": "string" },
          "chats": {
            "items": { "$ref": "#/components/schemas/ChatDetail" },
            "type": "array"
          },
          "comments": {
            "items": { "$ref": "#/components/schemas/IssueReportCommentItem" },
            "type": "array"
          },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "description": { "type": "string" },
          "issueReportId": { "type": "string" },
          "issueReportShortId": { "type": "string" },
          "mediaFiles": {
            "items": { "$ref": "#/components/schemas/MediaFile" },
            "type": "array"
          },
          "option": { "type": "string" },
          "personDetail": { "$ref": "#/components/schemas/PersonDetail" },
          "rideId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/IssueStatus" }
        },
        "required": [
          "issueReportId",
          "comments",
          "category",
          "mediaFiles",
          "description",
          "status",
          "createdAt"
        ],
        "type": "object"
      },
      "MediaFile_": {
        "properties": {
          "_type": { "$ref": "#/components/schemas/FileType" },
          "url": { "type": "string" }
        },
        "required": ["_type", "url"],
        "type": "object"
      },
      "FileType": {
        "enum": [
          "Audio",
          "Video",
          "Image",
          "AudioLink",
          "VideoLink",
          "ImageLink",
          "PortraitVideoLink"
        ],
        "type": "string"
      },
      "ChatDetail": {
        "properties": {
          "actionText": { "type": "string" },
          "chatType": { "$ref": "#/components/schemas/MessageType" },
          "content": { "type": "string" },
          "id": { "type": "string" },
          "label": { "type": "string" },
          "sender": { "$ref": "#/components/schemas/Sender" },
          "timestamp": { "$ref": "#/components/schemas/UTCTime" },
          "title": { "type": "string" }
        },
        "required": ["timestamp", "id", "chatType", "sender"],
        "type": "object"
      },
      "MessageType": { "enum": ["Text", "Audio", "Image"], "type": "string" },
      "Sender": { "enum": ["USER", "BOT"], "type": "string" },
      "IssueUpdateReq": {
        "properties": {
          "categoryId": { "type": "string" },
          "optionId": { "type": "string" }
        },
        "required": ["categoryId", "optionId"],
        "type": "object"
      },
      "IssueStatusUpdateRes": {
        "properties": {
          "messages": {
            "items": { "$ref": "#/components/schemas/Message" },
            "type": "array"
          }
        },
        "required": ["messages"],
        "type": "object"
      },
      "IssueStatusUpdateReq": {
        "properties": {
          "status": { "$ref": "#/components/schemas/IssueStatus" }
        },
        "required": ["status"],
        "type": "object"
      },
      "TicketPlace": {
        "properties": {
          "allowSameDayBooking": { "type": "boolean" },
          "closeTimings": { "$ref": "#/components/schemas/TimeOfDay" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "description": { "type": "string" },
          "gallery": { "items": { "type": "string" }, "type": "array" },
          "iconUrl": { "type": "string" },
          "id": { "type": "string" },
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" },
          "mapImageUrl": { "type": "string" },
          "merchantId": { "type": "string" },
          "merchantOperatingCityId": { "type": "string" },
          "name": { "type": "string" },
          "openTimings": { "$ref": "#/components/schemas/TimeOfDay" },
          "placeType": { "$ref": "#/components/schemas/PlaceType" },
          "shortDesc": { "type": "string" },
          "status": { "$ref": "#/components/schemas/PlaceStatus" },
          "termsAndConditions": {
            "items": { "type": "string" },
            "type": "array"
          },
          "termsAndConditionsUrl": { "type": "string" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": [
          "allowSameDayBooking",
          "gallery",
          "id",
          "merchantOperatingCityId",
          "name",
          "placeType",
          "shortDesc",
          "status",
          "termsAndConditions",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "PlaceType": {
        "enum": [
          "Museum",
          "ThemePark",
          "AmusementPark",
          "WaterPark",
          "WildLifeSanctuary",
          "ArtGallery",
          "HeritageSite",
          "ReligiousSite",
          "Other"
        ],
        "type": "string"
      },
      "PlaceStatus": {
        "enum": ["Active", "Inactive", "ComingSoon"],
        "type": "string"
      },
      "TicketServiceResp": {
        "properties": {
          "allowCancellation": { "type": "boolean" },
          "allowFutureBooking": { "type": "boolean" },
          "businessHours": {
            "items": { "$ref": "#/components/schemas/BusinessHourResp" },
            "type": "array"
          },
          "expiry": { "$ref": "#/components/schemas/ExpiryType" },
          "id": { "type": "string" },
          "maxVerification": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "name": { "type": "string" },
          "placesId": { "type": "string" },
          "shortDesc": { "type": "string" }
        },
        "required": [
          "allowCancellation",
          "allowFutureBooking",
          "businessHours",
          "expiry",
          "id",
          "maxVerification",
          "name",
          "placesId"
        ],
        "type": "object"
      },
      "BusinessHourResp": {
        "properties": {
          "categories": {
            "items": { "$ref": "#/components/schemas/CategoriesResp" },
            "type": "array"
          },
          "endTime": { "$ref": "#/components/schemas/TimeOfDay" },
          "id": { "type": "string" },
          "operationalDays": { "items": { "type": "string" }, "type": "array" },
          "slot": { "$ref": "#/components/schemas/TimeOfDay" },
          "specialDayDescription": { "type": "string" },
          "specialDayType": { "$ref": "#/components/schemas/SpecialDayType" },
          "startTime": { "$ref": "#/components/schemas/TimeOfDay" }
        },
        "required": ["categories", "id", "operationalDays"],
        "type": "object"
      },
      "CategoriesResp": {
        "properties": {
          "allowedSeats": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "availableSeats": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "bookedSeats": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "id": { "type": "string" },
          "isClosed": { "type": "boolean" },
          "name": { "type": "string" },
          "peopleCategories": {
            "items": { "$ref": "#/components/schemas/PeopleCategoriesResp" },
            "type": "array"
          }
        },
        "required": [
          "bookedSeats",
          "id",
          "isClosed",
          "name",
          "peopleCategories"
        ],
        "type": "object"
      },
      "PeopleCategoriesResp": {
        "properties": {
          "cancellationCharges": {
            "items": { "$ref": "#/components/schemas/CancellationCharge" },
            "type": "array"
          },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "pricePerUnit": { "$ref": "#/components/schemas/HighPrecMoney" },
          "pricePerUnitWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "pricePerUnit",
          "pricePerUnitWithCurrency"
        ],
        "type": "object"
      },
      "CancellationCharge": {
        "properties": {
          "cancelCharge": { "$ref": "#/components/schemas/CancelCharge" },
          "time": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["cancelCharge", "time"],
        "type": "object"
      },
      "CancelCharge": {
        "oneOf": [
          {
            "properties": {
              "contents": { "$ref": "#/components/schemas/HighPrecMoney" },
              "tag": { "enum": ["FlatFee"], "type": "string" }
            },
            "required": ["tag", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": {
                "maximum": 9223372036854775807,
                "minimum": -9223372036854775808,
                "type": "integer"
              },
              "tag": { "enum": ["Percentage"], "type": "string" }
            },
            "required": ["tag", "contents"],
            "type": "object"
          }
        ]
      },
      "SpecialDayType": { "enum": ["Open", "Closed"], "type": "string" },
      "ExpiryType": {
        "oneOf": [
          {
            "properties": {
              "contents": {
                "maximum": 9223372036854775807,
                "minimum": -9223372036854775808,
                "type": "integer"
              },
              "tag": { "enum": ["InstantExpiry"], "type": "string" }
            },
            "required": ["tag", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "contents": { "$ref": "#/components/schemas/TimeOfDay" },
              "tag": { "enum": ["VisitDate"], "type": "string" }
            },
            "required": ["tag", "contents"],
            "type": "object"
          }
        ]
      },
      "TicketBookingReq": {
        "properties": {
          "services": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingServicesReq"
            },
            "type": "array"
          },
          "visitDate": { "$ref": "#/components/schemas/Day" }
        },
        "required": ["services", "visitDate"],
        "type": "object"
      },
      "TicketBookingServicesReq": {
        "properties": {
          "businessHourId": { "type": "string" },
          "categories": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingCategoryReq"
            },
            "type": "array"
          },
          "serviceId": { "type": "string" }
        },
        "required": ["businessHourId", "categories", "serviceId"],
        "type": "object"
      },
      "TicketBookingCategoryReq": {
        "properties": {
          "categoryId": { "type": "string" },
          "peopleCategories": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingPeopleCategoryReq"
            },
            "type": "array"
          }
        },
        "required": ["categoryId", "peopleCategories"],
        "type": "object"
      },
      "TicketBookingPeopleCategoryReq": {
        "properties": {
          "numberOfUnits": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "peopleCategoryId": { "type": "string" }
        },
        "required": ["numberOfUnits", "peopleCategoryId"],
        "type": "object"
      },
      "Day": { "example": "2016-07-22", "format": "date", "type": "string" },
      "TicketBookingAPIEntity": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "amountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "personId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/BookingStatus" },
          "ticketPlaceId": { "type": "string" },
          "ticketPlaceName": { "type": "string" },
          "ticketShortId": { "type": "string" },
          "visitDate": { "$ref": "#/components/schemas/Day" }
        },
        "required": [
          "amount",
          "amountWithCurrency",
          "personId",
          "status",
          "ticketPlaceId",
          "ticketPlaceName",
          "ticketShortId",
          "visitDate"
        ],
        "type": "object"
      },
      "TicketBookingDetails": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "amountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "personId": { "type": "string" },
          "refundDetails": {
            "items": { "$ref": "#/components/schemas/Refunds" },
            "type": "array"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingServiceDetails"
            },
            "type": "array"
          },
          "status": { "$ref": "#/components/schemas/BookingStatus" },
          "ticketPlaceId": { "type": "string" },
          "ticketPlaceName": { "type": "string" },
          "ticketShortId": { "type": "string" },
          "visitDate": { "$ref": "#/components/schemas/Day" }
        },
        "required": [
          "amount",
          "amountWithCurrency",
          "personId",
          "refundDetails",
          "services",
          "status",
          "ticketPlaceId",
          "ticketPlaceName",
          "ticketShortId",
          "visitDate"
        ],
        "type": "object"
      },
      "Refunds": {
        "properties": {
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "errorCode": { "type": "string" },
          "errorMessage": { "type": "string" },
          "id": { "type": "string" },
          "idAssignedByServiceProvider": { "type": "string" },
          "initiatedBy": { "type": "string" },
          "merchantId": { "type": "string" },
          "orderId": { "type": "string" },
          "refundAmount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "shortId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/RefundStatus" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": [
          "createdAt",
          "id",
          "merchantId",
          "orderId",
          "refundAmount",
          "shortId",
          "status",
          "updatedAt"
        ],
        "type": "object"
      },
      "TicketBookingServiceDetails": {
        "properties": {
          "allowCancellation": { "type": "boolean" },
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "amountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "businessHourId": { "type": "string" },
          "categories": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingCategoryDetails"
            },
            "type": "array"
          },
          "expiryDate": { "$ref": "#/components/schemas/UTCTime" },
          "slot": { "$ref": "#/components/schemas/TimeOfDay" },
          "status": { "$ref": "#/components/schemas/ServiceStatus" },
          "ticketServiceName": { "type": "string" },
          "ticketServiceShortId": { "type": "string" },
          "verificationCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": [
          "allowCancellation",
          "amount",
          "amountWithCurrency",
          "categories",
          "status",
          "ticketServiceName",
          "ticketServiceShortId",
          "verificationCount"
        ],
        "type": "object"
      },
      "TicketBookingCategoryDetails": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "amountToRefund": { "$ref": "#/components/schemas/HighPrecMoney" },
          "amountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "bookedSeats": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "cancelledSeats": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "peopleCategories": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingPeopleCategoryDetails"
            },
            "type": "array"
          },
          "serviceCategoryId": { "type": "string" }
        },
        "required": [
          "amount",
          "amountWithCurrency",
          "bookedSeats",
          "id",
          "name",
          "peopleCategories"
        ],
        "type": "object"
      },
      "TicketBookingPeopleCategoryDetails": {
        "properties": {
          "amountToRefund": { "$ref": "#/components/schemas/HighPrecMoney" },
          "cancelCharges": {
            "items": { "$ref": "#/components/schemas/CancellationCharge" },
            "type": "array"
          },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "numberOfUnits": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "numberOfUnitsCancelled": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "pricePerUnit": { "$ref": "#/components/schemas/HighPrecMoney" },
          "pricePerUnitWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          }
        },
        "required": [
          "id",
          "name",
          "numberOfUnits",
          "pricePerUnit",
          "pricePerUnitWithCurrency"
        ],
        "type": "object"
      },
      "ServiceStatus": {
        "enum": ["Pending", "Failed", "Confirmed", "Verified", "Cancelled"],
        "type": "string"
      },
      "TicketServiceVerificationResp": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "amountWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "categories": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingCategoryDetails"
            },
            "type": "array"
          },
          "endTime": { "$ref": "#/components/schemas/TimeOfDay" },
          "message": { "type": "string" },
          "startTime": { "$ref": "#/components/schemas/TimeOfDay" },
          "status": { "$ref": "#/components/schemas/TicketVerificationStatus" },
          "ticketServiceName": { "type": "string" },
          "ticketServiceShortId": { "type": "string" },
          "validTill": { "$ref": "#/components/schemas/UTCTime" },
          "verificationCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "visitDate": { "$ref": "#/components/schemas/Day" }
        },
        "required": ["categories", "message", "status"],
        "type": "object"
      },
      "TicketVerificationStatus": {
        "enum": [
          "BookingSuccess",
          "BookingExpired",
          "BookingFuture",
          "BookingAlreadyVerified",
          "DifferentService",
          "PaymentPending",
          "InvalidBooking",
          "CancelledBooking"
        ],
        "type": "string"
      },
      "TicketBookingCancelReq": {
        "properties": {
          "ticketBookingServices": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingServiceCancelReq"
            },
            "type": "array"
          },
          "ticketBookingShortId": { "type": "string" }
        },
        "required": ["ticketBookingServices", "ticketBookingShortId"],
        "type": "object"
      },
      "TicketBookingServiceCancelReq": {
        "properties": {
          "businessHourId": { "type": "string" },
          "serviceCategory": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingServiceCategoryCancelReq"
            },
            "type": "array"
          },
          "shortId": { "type": "string" }
        },
        "required": ["businessHourId", "serviceCategory", "shortId"],
        "type": "object"
      },
      "TicketBookingServiceCategoryCancelReq": {
        "properties": {
          "id": { "type": "string" },
          "peopleCategory": {
            "items": {
              "$ref": "#/components/schemas/TicketBookingServicePeopleCategoryCancelReq"
            },
            "type": "array"
          },
          "serviceCategoryId": { "type": "string" },
          "visitDate": { "$ref": "#/components/schemas/Day" }
        },
        "required": ["id", "peopleCategory", "serviceCategoryId", "visitDate"],
        "type": "object"
      },
      "TicketBookingServicePeopleCategoryCancelReq": {
        "properties": {
          "id": { "type": "string" },
          "quantity": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["id", "quantity"],
        "type": "object"
      },
      "TicketBookingUpdateSeatsReq": {
        "properties": {
          "businessHourId": { "type": "string" },
          "categoryId": { "type": "string" },
          "date": { "$ref": "#/components/schemas/Day" },
          "ticketServiceId": { "type": "string" },
          "updatedBookedSeats": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": [
          "businessHourId",
          "categoryId",
          "date",
          "ticketServiceId",
          "updatedBookedSeats"
        ],
        "type": "object"
      },
      "TicketServiceCancelReq": {
        "properties": {
          "businessHourId": { "type": "string" },
          "date": { "$ref": "#/components/schemas/Day" },
          "description": { "type": "string" },
          "ticketServiceCategoryId": { "type": "string" },
          "ticketServiceId": { "type": "string" }
        },
        "required": [
          "businessHourId",
          "date",
          "ticketServiceCategoryId",
          "ticketServiceId"
        ],
        "type": "object"
      },
      "InvoiceRes": {
        "properties": {
          "chargeableDistance": { "$ref": "#/components/schemas/Centesimal" },
          "chargeableDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "date": { "$ref": "#/components/schemas/UTCTime" },
          "destination": { "type": "string" },
          "driverName": { "type": "string" },
          "faresList": {
            "items": { "$ref": "#/components/schemas/FareBreakup" },
            "type": "array"
          },
          "rideEndTime": { "$ref": "#/components/schemas/UTCTime" },
          "rideStartTime": { "$ref": "#/components/schemas/UTCTime" },
          "shortRideId": { "type": "string" },
          "source": { "type": "string" },
          "totalAmount": { "type": "string" },
          "vehicleNumber": { "type": "string" }
        },
        "required": [
          "date",
          "destination",
          "driverName",
          "faresList",
          "rideEndTime",
          "rideStartTime",
          "shortRideId",
          "source",
          "totalAmount",
          "vehicleNumber"
        ],
        "type": "object"
      },
      "FareBreakup": {
        "properties": {
          "price": { "type": "string" },
          "title": { "type": "string" }
        },
        "required": ["price", "title"],
        "type": "object"
      },
      "Followers": {
        "properties": {
          "bookingId": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "name": { "type": "string" },
          "priority": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["bookingId", "mobileNumber", "priority"],
        "type": "object"
      },
      "ShareRideReq": {
        "properties": {
          "emergencyContactNumbers": {
            "items": { "type": "string" },
            "type": "array"
          }
        },
        "required": ["emergencyContactNumbers"],
        "type": "object"
      },
      "EmergencyContactsStatusRes": {
        "properties": {
          "details": {
            "items": { "$ref": "#/components/schemas/ContactsDetail" },
            "type": "array"
          }
        },
        "required": ["details"],
        "type": "object"
      },
      "ContactsDetail": {
        "properties": {
          "personId": { "type": "string" },
          "updateTime": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": ["personId", "updateTime"],
        "type": "object"
      },
      "SosDetailsRes": {
        "properties": { "sos": { "$ref": "#/components/schemas/Sos" } },
        "type": "object"
      },
      "Sos": {
        "properties": {
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "flow": { "$ref": "#/components/schemas/SosType" },
          "id": { "type": "string" },
          "merchantId": { "type": "string" },
          "merchantOperatingCityId": { "type": "string" },
          "personId": { "type": "string" },
          "rideId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/SosStatus" },
          "ticketId": { "type": "string" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": [
          "flow",
          "id",
          "personId",
          "rideId",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "SosType": {
        "oneOf": [
          {
            "properties": { "tag": { "enum": ["Police"], "type": "string" } },
            "required": ["tag"],
            "type": "object"
          },
          {
            "properties": {
              "tag": { "enum": ["CustomerCare"], "type": "string" }
            },
            "required": ["tag"],
            "type": "object"
          },
          {
            "properties": {
              "contents": { "$ref": "#/components/schemas/EmergencyContactId" },
              "tag": { "enum": ["EmergencyContact"], "type": "string" }
            },
            "required": ["tag", "contents"],
            "type": "object"
          },
          {
            "properties": {
              "tag": { "enum": ["SafetyFlow"], "type": "string" }
            },
            "required": ["tag"],
            "type": "object"
          },
          {
            "properties": {
              "tag": { "enum": ["PoliceAPI"], "type": "string" }
            },
            "required": ["tag"],
            "type": "object"
          }
        ]
      },
      "EmergencyContactId": { "type": "string" },
      "SosRes": {
        "properties": { "sosId": { "type": "string" } },
        "required": ["sosId"],
        "type": "object"
      },
      "SosReq": {
        "properties": {
          "customerLocation": { "$ref": "#/components/schemas/LatLong" },
          "flow": { "$ref": "#/components/schemas/SosType" },
          "isRideEnded": { "type": "boolean" },
          "rideId": { "type": "string" }
        },
        "required": ["flow", "rideId"],
        "type": "object"
      },
      "SosUpdateReq": {
        "properties": {
          "comment": { "type": "string" },
          "status": { "$ref": "#/components/schemas/SosStatus" }
        },
        "required": ["status"],
        "type": "object"
      },
      "MarkAsSafeReq": {
        "properties": {
          "isMock": { "type": "boolean" },
          "isRideEnded": { "type": "boolean" }
        },
        "type": "object"
      },
      "MockSosReq": {
        "properties": {
          "onRide": { "type": "boolean" },
          "startDrill": { "type": "boolean" }
        },
        "type": "object"
      },
      "CallPoliceAPI": {
        "properties": { "rideId": { "type": "string" } },
        "required": ["rideId"],
        "type": "object"
      },
      "FRFSStationAPI": {
        "properties": {
          "address": { "type": "string" },
          "code": { "type": "string" },
          "color": { "type": "string" },
          "lat": { "format": "double", "type": "number" },
          "lon": { "format": "double", "type": "number" },
          "name": { "type": "string" },
          "sequenceNum": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "stationType": { "$ref": "#/components/schemas/StationType" }
        },
        "required": ["code", "name"],
        "type": "object"
      },
      "StationType": {
        "enum": ["START", "END", "TRANSIT", "INTERMEDIATE"],
        "type": "string"
      },
      "FRFSSearchAPIRes": {
        "properties": { "searchId": { "type": "string" } },
        "required": ["searchId"],
        "type": "object"
      },
      "FRFSSearchAPIReq": {
        "properties": {
          "fromStationCode": { "type": "string" },
          "quantity": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "toStationCode": { "type": "string" }
        },
        "required": ["fromStationCode", "quantity", "toStationCode"],
        "type": "object"
      },
      "FRFSQuoteAPIRes": {
        "properties": {
          "_type": { "$ref": "#/components/schemas/FRFSQuoteType" },
          "discountedTickets": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "eventDiscountAmount": {
            "$ref": "#/components/schemas/HighPrecMoney"
          },
          "price": { "$ref": "#/components/schemas/HighPrecMoney" },
          "priceWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "quantity": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "quoteId": { "type": "string" },
          "stations": {
            "items": { "$ref": "#/components/schemas/FRFSStationAPI" },
            "type": "array"
          },
          "validTill": { "$ref": "#/components/schemas/UTCTime" },
          "vehicleType": { "$ref": "#/components/schemas/FRFSVehicleType" }
        },
        "required": [
          "_type",
          "price",
          "priceWithCurrency",
          "quantity",
          "quoteId",
          "stations",
          "validTill",
          "vehicleType"
        ],
        "type": "object"
      },
      "FRFSQuoteType": {
        "enum": [
          "SingleJourney",
          "ReturnJourney",
          "Pass",
          "SpecialFareSingleJourney"
        ],
        "type": "string"
      },
      "FRFSVehicleType": { "enum": ["METRO", "BUS"], "type": "string" },
      "FRFSTicketBookingStatusAPIRes": {
        "properties": {
          "_type": { "$ref": "#/components/schemas/FRFSQuoteType" },
          "bookingId": { "type": "string" },
          "city": { "$ref": "#/components/schemas/City" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "discountedTickets": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "eventDiscountAmount": {
            "$ref": "#/components/schemas/HighPrecMoney"
          },
          "payment": { "$ref": "#/components/schemas/FRFSBookingPaymentAPI" },
          "price": { "$ref": "#/components/schemas/HighPrecMoney" },
          "priceWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "quantity": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "stations": {
            "items": { "$ref": "#/components/schemas/FRFSStationAPI" },
            "type": "array"
          },
          "status": { "$ref": "#/components/schemas/FRFSTicketBookingStatus" },
          "tickets": {
            "items": { "$ref": "#/components/schemas/FRFSTicketAPI" },
            "type": "array"
          },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" },
          "validTill": { "$ref": "#/components/schemas/UTCTime" },
          "vehicleType": { "$ref": "#/components/schemas/FRFSVehicleType" }
        },
        "required": [
          "_type",
          "bookingId",
          "city",
          "createdAt",
          "price",
          "priceWithCurrency",
          "quantity",
          "stations",
          "status",
          "tickets",
          "updatedAt",
          "validTill",
          "vehicleType"
        ],
        "type": "object"
      },
      "FRFSBookingPaymentAPI": {
        "properties": {
          "paymentOrder": { "$ref": "#/components/schemas/CreateOrderResp" },
          "status": {
            "$ref": "#/components/schemas/FRFSBookingPaymentStatusAPI"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "FRFSBookingPaymentStatusAPI": {
        "enum": [
          "NEW",
          "PENDING",
          "SUCCESS",
          "FAILURE",
          "REFUND_PENDING",
          "REFUNDED"
        ],
        "type": "string"
      },
      "FRFSTicketBookingStatus": {
        "enum": [
          "NEW",
          "APPROVED",
          "PAYMENT_PENDING",
          "CONFIRMING",
          "FAILED",
          "CONFIRMED",
          "CANCELLED",
          "COUNTER_CANCELLED"
        ],
        "type": "string"
      },
      "FRFSTicketAPI": {
        "properties": {
          "qrData": { "type": "string" },
          "status": { "$ref": "#/components/schemas/FRFSTicketStatus" },
          "ticketNumber": { "type": "string" },
          "validTill": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": ["qrData", "status", "ticketNumber", "validTill"],
        "type": "object"
      },
      "FRFSTicketStatus": {
        "enum": ["ACTIVE", "EXPIRED", "USED", "CANCELLED", "COUNTER_CANCELLED"],
        "type": "string"
      },
      "FRFSCanCancelStatus": {
        "properties": {
          "cancellationCharges": {
            "$ref": "#/components/schemas/HighPrecMoney"
          },
          "isCancellable": { "type": "boolean" },
          "refundAmount": { "$ref": "#/components/schemas/HighPrecMoney" }
        },
        "type": "object"
      },
      "FRFSCancelStatus": {
        "properties": {
          "cancellationCharges": {
            "$ref": "#/components/schemas/HighPrecMoney"
          },
          "refundAmount": { "$ref": "#/components/schemas/HighPrecMoney" }
        },
        "type": "object"
      },
      "FRFSConfigAPIRes": {
        "properties": {
          "bookingEndTime": { "$ref": "#/components/schemas/UTCTime" },
          "bookingStartTime": { "$ref": "#/components/schemas/UTCTime" },
          "customDates": { "items": { "type": "string" }, "type": "array" },
          "customEndTime": { "type": "string" },
          "discount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "freeTicketInterval": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "isEventOngoing": { "type": "boolean" },
          "maxFreeTicketCashback": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "metroStationTtl": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "oneWayTicketLimit": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "roundTripTicketLimit": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "ticketsBookedInEvent": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": [
          "bookingEndTime",
          "bookingStartTime",
          "customDates",
          "customEndTime",
          "discount",
          "isEventOngoing",
          "metroStationTtl",
          "oneWayTicketLimit",
          "roundTripTicketLimit",
          "ticketsBookedInEvent"
        ],
        "type": "object"
      },
      "Object": {
        "additionalProperties": true,
        "description": "Arbitrary JSON object.",
        "type": "object"
      },
      "ReferredCustomers": {
        "properties": {
          "count": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["count"],
        "type": "object"
      },
      "EditLocationResultAPIResp": {
        "properties": {
          "bookingUpdateRequestDetails": {
            "$ref": "#/components/schemas/BookingUpdateRequest"
          }
        },
        "required": ["bookingUpdateRequestDetails"],
        "type": "object"
      },
      "BookingUpdateRequest": {
        "properties": {
          "bookingId": { "type": "string" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "currentPointLat": { "format": "double", "type": "number" },
          "currentPointLon": { "format": "double", "type": "number" },
          "distanceUnit": { "$ref": "#/components/schemas/DistanceUnit" },
          "errorObj": { "$ref": "#/components/schemas/ErrorObj" },
          "estimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedFare": { "$ref": "#/components/schemas/HighPrecMoney" },
          "id": { "type": "string" },
          "merchantId": { "type": "string" },
          "merchantOperatingCityId": { "type": "string" },
          "oldEstimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "oldEstimatedFare": { "$ref": "#/components/schemas/HighPrecMoney" },
          "status": {
            "$ref": "#/components/schemas/BookingUpdateRequestStatus"
          },
          "totalDistance": { "$ref": "#/components/schemas/Centesimal" },
          "travelledDistance": { "$ref": "#/components/schemas/Centesimal" },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": [
          "bookingId",
          "createdAt",
          "distanceUnit",
          "id",
          "merchantId",
          "merchantOperatingCityId",
          "oldEstimatedFare",
          "status",
          "updatedAt"
        ],
        "type": "object"
      },
      "ErrorObj": {
        "properties": {
          "errorCode": { "type": "string" },
          "errorMessage": { "type": "string" }
        },
        "required": ["errorCode", "errorMessage"],
        "type": "object"
      },
      "BookingUpdateRequestStatus": {
        "enum": ["SOFT", "CONFIRM"],
        "type": "string"
      },
      "SocialLoginRes": {
        "properties": {
          "isNew": { "type": "boolean" },
          "token": { "type": "string" }
        },
        "required": ["isNew", "token"],
        "type": "object"
      },
      "SocialLoginReq": {
        "properties": {
          "email": { "type": "string" },
          "enableOtpLessRide": { "type": "boolean" },
          "merchantId": { "type": "string" },
          "merchantShortId": { "type": "string" },
          "name": { "type": "string" },
          "oauthProvider": { "$ref": "#/components/schemas/OAuthProvider" },
          "registrationLat": { "format": "double", "type": "number" },
          "registrationLon": { "format": "double", "type": "number" },
          "tokenId": { "type": "string" }
        },
        "required": [
          "merchantId",
          "merchantShortId",
          "oauthProvider",
          "tokenId"
        ],
        "type": "object"
      },
      "OAuthProvider": { "enum": ["Google", "IOS"], "type": "string" },
      "SocialUpdateProfileReq": {
        "properties": {
          "email": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "mobileCountryCode": { "type": "string" },
          "mobileNumber": { "type": "string" }
        },
        "required": ["email"],
        "type": "object"
      },
      "EstimateDetailsRes": {
        "properties": {
          "estimateBreakup": {
            "items": { "$ref": "#/components/schemas/EstimateBreakup" },
            "type": "array"
          }
        },
        "required": ["estimateBreakup"],
        "type": "object"
      },
      "EstimateBreakup": {
        "properties": {
          "price": { "$ref": "#/components/schemas/EstimateBreakupPrice" },
          "title": { "type": "string" }
        },
        "required": ["title", "price"],
        "type": "object"
      },
      "EstimateBreakupPrice": {
        "properties": {
          "value": { "$ref": "#/components/schemas/PriceAPIEntity" }
        },
        "required": ["value"],
        "type": "object"
      },
      "FavouriteDriverResp": {
        "properties": {
          "driverName": { "type": "string" },
          "driverPhone": { "type": "string" },
          "driverRating": { "format": "double", "type": "number" },
          "favCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "id": { "type": "string" }
        },
        "required": [
          "driverName",
          "driverPhone",
          "driverRating",
          "favCount",
          "id"
        ],
        "type": "object"
      },
      "GetFareResp": {
        "properties": {
          "personId": { "type": "string" },
          "searchId": { "type": "string" },
          "token": { "type": "string" }
        },
        "required": ["searchId", "personId", "token"],
        "type": "object"
      },
      "GetFareReq": {
        "properties": {
          "fromStationCode": { "type": "string" },
          "identifierType": { "$ref": "#/components/schemas/IdentifierType" },
          "mobileCountryCode": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "numberOfPassengers": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "partnerOrgTransactionId": { "type": "string" },
          "toStationCode": { "type": "string" }
        },
        "required": [
          "fromStationCode",
          "toStationCode",
          "numberOfPassengers",
          "mobileCountryCode",
          "mobileNumber",
          "identifierType"
        ],
        "type": "object"
      },
      "GetConfigResp": {
        "properties": {
          "city": { "$ref": "#/components/schemas/City" },
          "frfsConfig": { "$ref": "#/components/schemas/FRFSConfigAPIRes" },
          "fromStation": { "$ref": "#/components/schemas/FRFSStationAPI" },
          "toStation": { "$ref": "#/components/schemas/FRFSStationAPI" }
        },
        "required": ["frfsConfig", "fromStation", "toStation", "city"],
        "type": "object"
      },
      "ShareTicketInfoResp": {
        "properties": {
          "bookingPrice": { "$ref": "#/components/schemas/HighPrecMoney" },
          "city": { "$ref": "#/components/schemas/City" },
          "fromStation": { "$ref": "#/components/schemas/FRFSStationAPI" },
          "partnerOrgTransactionId": { "type": "string" },
          "paymentStatus": {
            "$ref": "#/components/schemas/FRFSBookingPaymentStatusAPI"
          },
          "returnType": { "$ref": "#/components/schemas/FRFSQuoteType" },
          "tickets": {
            "items": { "$ref": "#/components/schemas/FRFSTicketAPI" },
            "type": "array"
          },
          "toStation": { "$ref": "#/components/schemas/FRFSStationAPI" }
        },
        "required": [
          "tickets",
          "city",
          "returnType",
          "fromStation",
          "toStation",
          "bookingPrice",
          "paymentStatus"
        ],
        "type": "object"
      },
      "Value": { "description": "Some JSON.", "type": "string" },
      "CustomerListRes": {
        "properties": {
          "customers": {
            "items": { "$ref": "#/components/schemas/CustomerListItem" },
            "type": "array"
          },
          "summary": { "$ref": "#/components/schemas/Summary" },
          "totalItems": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["totalItems", "summary", "customers"],
        "type": "object"
      },
      "Summary": {
        "properties": {
          "count": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "totalCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["totalCount", "count"],
        "type": "object"
      },
      "CustomerListItem": {
        "properties": {
          "blocked": { "type": "boolean" },
          "customerId": { "type": "string" },
          "enabled": { "type": "boolean" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "middleName": { "type": "string" },
          "phoneNo": { "type": "string" }
        },
        "required": ["customerId", "enabled", "blocked"],
        "type": "object"
      },
      "CustomerInfoRes": {
        "properties": {
          "falseSafetyAlarmCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "numberOfRides": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "safetyCenterDisabledOnDate": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "totalSosCount": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["numberOfRides", "falseSafetyAlarmCount", "totalSosCount"],
        "type": "object"
      },
      "CustomerCancellationDuesSyncReq": {
        "properties": {
          "cancellationCharges": {
            "$ref": "#/components/schemas/HighPrecMoney"
          },
          "cancellationChargesWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "disputeChancesUsed": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "paymentMadeToDriver": { "type": "boolean" }
        },
        "required": ["paymentMadeToDriver"],
        "type": "object"
      },
      "UpdateSafetyCenterBlockingReq": {
        "properties": {
          "incrementCount": { "type": "boolean" },
          "resetCount": { "type": "boolean" }
        },
        "type": "object"
      },
      "PersonRes": {
        "properties": {
          "alternateMobileNumber": { "type": "string" },
          "id": { "type": "string" },
          "merchantOperatingCityId": { "type": "string" },
          "mobileNumber": { "type": "string" }
        },
        "required": ["id", "merchantOperatingCityId"],
        "type": "object"
      },
      "ShareRideInfoRes": {
        "properties": {
          "bookingId": { "type": "string" },
          "driverName": { "type": "string" },
          "driverRating": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "fareProductType": { "$ref": "#/components/schemas/FareProductType" },
          "fromLocation": { "$ref": "#/components/schemas/Location" },
          "id": { "type": "string" },
          "nextStopLocation": { "$ref": "#/components/schemas/Location" },
          "rideEndTime": { "$ref": "#/components/schemas/UTCTime" },
          "rideScheduledAt": { "$ref": "#/components/schemas/UTCTime" },
          "rideStartTime": { "$ref": "#/components/schemas/UTCTime" },
          "sosStatus": { "$ref": "#/components/schemas/SosStatus" },
          "status": { "$ref": "#/components/schemas/RideStatus" },
          "toLocation": { "$ref": "#/components/schemas/Location" },
          "trackingUrl": { "$ref": "#/components/schemas/BaseUrl" },
          "userFirstName": { "type": "string" },
          "userLastName": { "type": "string" },
          "vehicleColor": { "type": "string" },
          "vehicleModel": { "type": "string" },
          "vehicleNumber": { "type": "string" },
          "vehicleVariant": { "$ref": "#/components/schemas/Variant" }
        },
        "required": [
          "id",
          "bookingId",
          "status",
          "driverName",
          "vehicleNumber",
          "vehicleModel",
          "vehicleColor",
          "fromLocation",
          "vehicleVariant",
          "rideScheduledAt",
          "fareProductType"
        ],
        "type": "object"
      },
      "Variant": {
        "enum": [
          "SEDAN",
          "SUV",
          "HATCHBACK",
          "AUTO_RICKSHAW",
          "TAXI",
          "TAXI_PLUS",
          "PREMIUM_SEDAN",
          "BLACK",
          "BLACK_XL",
          "BIKE",
          "AMBULANCE_TAXI",
          "AMBULANCE_TAXI_OXY",
          "AMBULANCE_AC",
          "AMBULANCE_AC_OXY",
          "AMBULANCE_VENTILATOR",
          "SUV_PLUS"
        ],
        "type": "string"
      },
      "RideListRes": {
        "properties": {
          "rides": {
            "items": { "$ref": "#/components/schemas/RideListItem" },
            "type": "array"
          },
          "summary": { "$ref": "#/components/schemas/Summary" },
          "totalItems": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": ["totalItems", "summary", "rides"],
        "type": "object"
      },
      "RideListItem": {
        "properties": {
          "bookingStatus": { "$ref": "#/components/schemas/BookingStatus" },
          "customerName": { "type": "string" },
          "customerPhoneNo": { "type": "string" },
          "driverName": { "type": "string" },
          "driverPhoneNo": { "type": "string" },
          "endOtp": { "type": "string" },
          "fareProductType": { "$ref": "#/components/schemas/FareProductType" },
          "nextStopLocation": { "$ref": "#/components/schemas/Location" },
          "rideCreatedAt": { "$ref": "#/components/schemas/UTCTime" },
          "rideId": { "type": "string" },
          "rideScheduledAt": { "$ref": "#/components/schemas/UTCTime" },
          "rideShortId": { "type": "string" },
          "vehicleNo": { "type": "string" }
        },
        "required": [
          "rideShortId",
          "rideCreatedAt",
          "rideId",
          "driverName",
          "driverPhoneNo",
          "vehicleNo",
          "bookingStatus",
          "rideScheduledAt",
          "fareProductType"
        ],
        "type": "object"
      },
      "RideInfoRes": {
        "properties": {
          "actualDriverArrivalTime": { "$ref": "#/components/schemas/UTCTime" },
          "actualFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "actualFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "bookingId": { "type": "string" },
          "cancelledBy": { "$ref": "#/components/schemas/CancellationSource" },
          "cancelledTime": { "$ref": "#/components/schemas/UTCTime" },
          "chargeableDistance": { "$ref": "#/components/schemas/Centesimal" },
          "chargeableDistanceWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "computedPrice": { "$ref": "#/components/schemas/HighPrecMoney" },
          "customerDropLocation": { "$ref": "#/components/schemas/Location" },
          "customerName": { "type": "string" },
          "customerPhoneNo": { "type": "string" },
          "customerPickupLocation": { "$ref": "#/components/schemas/Location" },
          "driverName": { "type": "string" },
          "driverPhoneNo": { "type": "string" },
          "driverRegisteredAt": { "$ref": "#/components/schemas/UTCTime" },
          "endOtp": { "type": "string" },
          "estimateFareBP": {
            "items": { "$ref": "#/components/schemas/EstimateBreakup" },
            "type": "array"
          },
          "estimatedDistance": { "$ref": "#/components/schemas/Centesimal" },
          "estimatedFare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "estimatedFareWithCurrency": {
            "$ref": "#/components/schemas/PriceAPIEntity"
          },
          "estimatedRideDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "fareBreakup": {
            "items": { "$ref": "#/components/schemas/FareBreakup" },
            "type": "array"
          },
          "fareProductType": { "$ref": "#/components/schemas/FareProductType" },
          "merchantOperatingCityId": { "type": "string" },
          "nextStopLocation": { "$ref": "#/components/schemas/Location" },
          "rideBookingTime": { "$ref": "#/components/schemas/UTCTime" },
          "rideCreatedAt": { "$ref": "#/components/schemas/UTCTime" },
          "rideDistanceActual": { "$ref": "#/components/schemas/Centesimal" },
          "rideDistanceActualWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "rideDistanceEstimated": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "rideDistanceEstimatedWithUnit": {
            "$ref": "#/components/schemas/Distance"
          },
          "rideDuration": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "rideEndTime": { "$ref": "#/components/schemas/UTCTime" },
          "rideId": { "type": "string" },
          "rideOtp": { "type": "string" },
          "rideScheduledAt": { "$ref": "#/components/schemas/UTCTime" },
          "rideStartTime": { "$ref": "#/components/schemas/UTCTime" },
          "rideStatus": { "$ref": "#/components/schemas/RideStatus" },
          "vehicleModel": { "type": "string" },
          "vehicleNo": { "type": "string" },
          "vehicleServiceTierName": { "type": "string" },
          "vehicleVariant": { "$ref": "#/components/schemas/Variant" }
        },
        "required": [
          "rideId",
          "bookingId",
          "rideStatus",
          "rideOtp",
          "customerPickupLocation",
          "driverName",
          "vehicleNo",
          "vehicleModel",
          "vehicleVariant",
          "rideBookingTime",
          "estimatedFare",
          "estimatedFareWithCurrency",
          "rideScheduledAt",
          "fareProductType",
          "fareBreakup",
          "rideCreatedAt"
        ],
        "type": "object"
      },
      "Price": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/HighPrecMoney" },
          "amountInt": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "currency": { "$ref": "#/components/schemas/Currency" }
        },
        "required": ["amountInt", "amount", "currency"],
        "type": "object"
      },
      "FareBreakupEntityType": {
        "enum": [
          "BOOKING_UPDATE_REQUEST",
          "BOOKING",
          "RIDE",
          "INITIAL_BOOKING"
        ],
        "type": "string"
      },
      "MultipleRideCancelReq": {
        "properties": {
          "multipleRideCancelInfo": {
            "items": { "$ref": "#/components/schemas/BookingCancelledReq" },
            "type": "array"
          }
        },
        "required": ["multipleRideCancelInfo"],
        "type": "object"
      },
      "BookingCancelledReq": {
        "properties": {
          "additionalInfo": { "type": "string" },
          "bookingId": { "type": "string" },
          "cancellationReasonCode": {
            "$ref": "#/components/schemas/CancellationReasonCode"
          },
          "cancellationStage": {
            "$ref": "#/components/schemas/CancellationStage"
          }
        },
        "required": [
          "bookingId",
          "cancellationReasonCode",
          "cancellationStage"
        ],
        "type": "object"
      },
      "MultipleRideSyncResp": {
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/MultipleRideSyncRespItem"
            },
            "type": "array"
          }
        },
        "required": ["list"],
        "type": "object"
      },
      "MultipleRideSyncRespItem": {
        "properties": {
          "info": { "$ref": "#/components/schemas/ListItemResult" },
          "rideId": { "type": "string" }
        },
        "required": ["rideId", "info"],
        "type": "object"
      },
      "ListItemResult": {
        "oneOf": [
          {
            "properties": {
              "result": { "enum": ["SuccessItem"], "type": "string" }
            },
            "required": ["result"],
            "type": "object"
          },
          {
            "properties": {
              "errorMessage": { "type": "string" },
              "result": { "enum": ["FailItem"], "type": "string" }
            },
            "required": ["result", "errorMessage"],
            "type": "object"
          }
        ]
      },
      "MultipleRideSyncReq": {
        "properties": {
          "rides": {
            "items": { "$ref": "#/components/schemas/MultipleRideItem" },
            "type": "array"
          }
        },
        "required": ["rides"],
        "type": "object"
      },
      "MultipleRideItem": {
        "properties": { "rideId": { "type": "string" } },
        "required": ["rideId"],
        "type": "object"
      },
      "TicketRideListRes": {
        "properties": {
          "rides": {
            "items": { "$ref": "#/components/schemas/RideInfo" },
            "type": "array"
          }
        },
        "required": ["rides"],
        "type": "object"
      },
      "RideInfo": {
        "properties": {
          "classification": { "$ref": "#/components/schemas/Classification" },
          "customerName": { "type": "string" },
          "customerPhoneNo": { "type": "string" },
          "driverName": { "type": "string" },
          "driverPhoneNo": { "type": "string" },
          "dropLocationArea": { "type": "string" },
          "dropLocationAreaCode": { "type": "string" },
          "dropLocationBuilding": { "type": "string" },
          "dropLocationCity": { "type": "string" },
          "dropLocationCountry": { "type": "string" },
          "dropLocationLat": { "format": "double", "type": "number" },
          "dropLocationLon": { "format": "double", "type": "number" },
          "dropLocationState": { "type": "string" },
          "dropLocationStreet": { "type": "string" },
          "endOtp": { "type": "string" },
          "fare": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "fareProductType": { "$ref": "#/components/schemas/FareProductType" },
          "fareWithCurrency": { "$ref": "#/components/schemas/PriceAPIEntity" },
          "nextStopLocation": { "$ref": "#/components/schemas/Location" },
          "personId": { "type": "string" },
          "pickupLocationArea": { "type": "string" },
          "pickupLocationAreaCode": { "type": "string" },
          "pickupLocationBuilding": { "type": "string" },
          "pickupLocationCity": { "type": "string" },
          "pickupLocationCountry": { "type": "string" },
          "pickupLocationLat": { "format": "double", "type": "number" },
          "pickupLocationLon": { "format": "double", "type": "number" },
          "pickupLocationState": { "type": "string" },
          "pickupLocationStreet": { "type": "string" },
          "rideCreatedAt": { "$ref": "#/components/schemas/UTCTime" },
          "rideScheduledAt": { "$ref": "#/components/schemas/UTCTime" },
          "rideShortId": { "type": "string" },
          "status": { "$ref": "#/components/schemas/BookingStatus" },
          "vehicleNo": { "type": "string" }
        },
        "required": [
          "rideShortId",
          "driverName",
          "vehicleNo",
          "status",
          "rideCreatedAt",
          "personId",
          "rideScheduledAt",
          "fareProductType",
          "classification"
        ],
        "type": "object"
      },
      "Classification": { "enum": ["DRIVER", "CUSTOMER"], "type": "string" },
      "IssueListRes": {
        "properties": {
          "list": {
            "items": { "$ref": "#/components/schemas/Issue" },
            "type": "array"
          },
          "summary": { "$ref": "#/components/schemas/Summary" }
        },
        "required": ["list", "summary"],
        "type": "object"
      },
      "IssueReportListResponse": {
        "properties": {
          "issues": {
            "items": { "$ref": "#/components/schemas/IssueReportListItem" },
            "type": "array"
          },
          "summary": { "$ref": "#/components/schemas/Summary" }
        },
        "required": ["issues", "summary"],
        "type": "object"
      },
      "PersonDetail": {
        "properties": {
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "middleName": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "personId": { "type": "string" }
        },
        "required": ["personId"],
        "type": "object"
      },
      "IssueReportCommentItem": {
        "properties": {
          "authorDetail": { "$ref": "#/components/schemas/AuthorDetail" },
          "comment": { "type": "string" },
          "timestamp": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": ["comment", "authorDetail", "timestamp"],
        "type": "object"
      },
      "AuthorDetail": {
        "properties": {
          "authorId": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" }
        },
        "required": ["authorId"],
        "type": "object"
      },
      "MediaFile": {
        "properties": {
          "_type": { "$ref": "#/components/schemas/FileType" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "id": { "type": "string" },
          "url": { "type": "string" }
        },
        "required": ["id", "_type", "url", "createdAt"],
        "type": "object"
      },
      "IssueUpdateByUserReq": {
        "properties": {
          "assignee": { "type": "string" },
          "status": { "$ref": "#/components/schemas/IssueStatus" },
          "userId": { "type": "string" }
        },
        "required": ["userId"],
        "type": "object"
      },
      "IssueAddCommentByUserReq": {
        "properties": {
          "comment": { "type": "string" },
          "userId": { "type": "string" }
        },
        "required": ["comment", "userId"],
        "type": "object"
      },
      "CreateIssueCategoryReq": {
        "properties": {
          "category": { "type": "string" },
          "categoryType": { "$ref": "#/components/schemas/CategoryType" },
          "isActive": { "type": "boolean" },
          "isRideRequired": { "type": "boolean" },
          "label": { "type": "string" },
          "logoUrl": { "type": "string" },
          "maxAllowedRideAge": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "messages": {
            "items": { "$ref": "#/components/schemas/CreateIssueMessageReq" },
            "type": "array"
          },
          "priority": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "translations": {
            "items": { "$ref": "#/components/schemas/Translation" },
            "type": "array"
          }
        },
        "required": [
          "category",
          "logoUrl",
          "priority",
          "categoryType",
          "isRideRequired",
          "translations",
          "messages"
        ],
        "type": "object"
      },
      "Translation": {
        "properties": {
          "language": { "$ref": "#/components/schemas/Language" },
          "translation": { "type": "string" }
        },
        "required": ["language", "translation"],
        "type": "object"
      },
      "CreateIssueMessageReq": {
        "properties": {
          "actionTranslations": {
            "items": { "$ref": "#/components/schemas/Translation" },
            "type": "array"
          },
          "isActive": { "type": "boolean" },
          "label": { "type": "string" },
          "message": { "type": "string" },
          "messageAction": { "type": "string" },
          "messageTitle": { "type": "string" },
          "messageTranslations": {
            "items": { "$ref": "#/components/schemas/Translation" },
            "type": "array"
          },
          "options": {
            "items": { "$ref": "#/components/schemas/CreateIssueOptionReq" },
            "type": "array"
          },
          "priority": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "referenceCategoryId": { "type": "string" },
          "referenceOptionId": { "type": "string" },
          "titleTranslations": {
            "items": { "$ref": "#/components/schemas/Translation" },
            "type": "array"
          }
        },
        "required": [
          "message",
          "priority",
          "messageTranslations",
          "titleTranslations",
          "actionTranslations",
          "options"
        ],
        "type": "object"
      },
      "CreateIssueOptionReq": {
        "properties": {
          "isActive": { "type": "boolean" },
          "label": { "type": "string" },
          "messages": {
            "items": { "$ref": "#/components/schemas/CreateIssueMessageReq" },
            "type": "array"
          },
          "option": { "type": "string" },
          "priority": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "restrictedVariants": {
            "items": { "$ref": "#/components/schemas/Variant" },
            "type": "array"
          },
          "showOnlyWhenUserBlocked": { "type": "boolean" },
          "translations": {
            "items": { "$ref": "#/components/schemas/Translation" },
            "type": "array"
          }
        },
        "required": ["option", "priority", "translations", "messages"],
        "type": "object"
      },
      "UpdateIssueCategoryReq": {
        "properties": {
          "category": { "type": "string" },
          "isActive": { "type": "boolean" },
          "isRideRequired": { "type": "boolean" },
          "label": { "type": "string" },
          "logoUrl": { "type": "string" },
          "maxAllowedRideAge": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "priority": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "translations": {
            "items": { "$ref": "#/components/schemas/Translation" },
            "type": "array"
          }
        },
        "required": ["translations"],
        "type": "object"
      },
      "UpdateIssueOptionReq": {
        "properties": {
          "isActive": { "type": "boolean" },
          "issueCategoryId": { "type": "string" },
          "issueMessageId": { "type": "string" },
          "label": { "type": "string" },
          "option": { "type": "string" },
          "priority": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "restrictedVariants": {
            "items": { "$ref": "#/components/schemas/Variant" },
            "type": "array"
          },
          "showOnlyWhenUserBlocked": { "type": "boolean" },
          "translations": {
            "items": { "$ref": "#/components/schemas/Translation" },
            "type": "array"
          }
        },
        "required": ["translations"],
        "type": "object"
      },
      "StuckBookingsCancelRes": {
        "properties": {
          "cancelledBookings": {
            "items": { "$ref": "#/components/schemas/StuckBookingItem" },
            "type": "array"
          }
        },
        "required": ["cancelledBookings"],
        "type": "object"
      },
      "StuckBookingItem": {
        "properties": {
          "bookingId": { "type": "string" },
          "rideId": { "type": "string" }
        },
        "required": ["bookingId"],
        "type": "object"
      },
      "StuckBookingsCancelReq": {
        "properties": {
          "bookingIds": { "items": { "type": "string" }, "type": "array" }
        },
        "required": ["bookingIds"],
        "type": "object"
      },
      "MultipleBookingSyncResp": {
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/MultipleBookingSyncRespItem"
            },
            "type": "array"
          }
        },
        "required": ["list"],
        "type": "object"
      },
      "MultipleBookingSyncRespItem": {
        "properties": {
          "bookingId": { "type": "string" },
          "info": { "$ref": "#/components/schemas/ListItemResult" }
        },
        "required": ["bookingId", "info"],
        "type": "object"
      },
      "MultipleBookingSyncReq": {
        "properties": {
          "bookings": {
            "items": { "$ref": "#/components/schemas/MultipleBookingItem" },
            "type": "array"
          }
        },
        "required": ["bookings"],
        "type": "object"
      },
      "MultipleBookingItem": {
        "properties": { "bookingId": { "type": "string" } },
        "required": ["bookingId"],
        "type": "object"
      },
      "MerchantUpdateReq": {
        "properties": {
          "exoPhones": {
            "items": { "$ref": "#/components/schemas/ExophoneReq" },
            "minItems": 1,
            "type": "array"
          },
          "fcmConfig": { "$ref": "#/components/schemas/FCMConfigUpdateReq" },
          "gatewayUrl": { "$ref": "#/components/schemas/BaseUrl" },
          "name": { "type": "string" },
          "registryUrl": { "$ref": "#/components/schemas/BaseUrl" }
        },
        "type": "object"
      },
      "ExophoneReq": {
        "properties": {
          "backupPhone": { "type": "string" },
          "callService": { "$ref": "#/components/schemas/CallService" },
          "primaryPhone": { "type": "string" }
        },
        "required": ["primaryPhone", "backupPhone", "callService"],
        "type": "object"
      },
      "CallService": { "enum": ["Exotel", "Knowlarity"], "type": "string" },
      "FCMConfigUpdateReq": {
        "properties": {
          "fcmServiceAccount": { "type": "string" },
          "fcmUrl": { "$ref": "#/components/schemas/BaseUrl" }
        },
        "required": ["fcmUrl", "fcmServiceAccount"],
        "type": "object"
      },
      "ServiceUsageConfigRes": {
        "properties": {
          "autoComplete": { "$ref": "#/components/schemas/MapsService" },
          "createdAt": { "$ref": "#/components/schemas/UTCTime" },
          "getDistances": { "$ref": "#/components/schemas/MapsService" },
          "getEstimatedPickupDistances": {
            "$ref": "#/components/schemas/MapsService"
          },
          "getPickupRoutes": { "$ref": "#/components/schemas/MapsService" },
          "getPlaceDetails": { "$ref": "#/components/schemas/MapsService" },
          "getPlaceName": { "$ref": "#/components/schemas/MapsService" },
          "getRoutes": { "$ref": "#/components/schemas/MapsService" },
          "getTripRoutes": { "$ref": "#/components/schemas/MapsService" },
          "smsProvidersPriorityList": {
            "items": { "$ref": "#/components/schemas/SmsService" },
            "type": "array"
          },
          "snapToRoad": { "$ref": "#/components/schemas/MapsService" },
          "snapToRoadProvidersList": {
            "items": { "$ref": "#/components/schemas/MapsService" },
            "type": "array"
          },
          "updatedAt": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": [
          "getDistances",
          "getRoutes",
          "snapToRoad",
          "getPlaceName",
          "getPlaceDetails",
          "autoComplete",
          "smsProvidersPriorityList",
          "snapToRoadProvidersList",
          "updatedAt",
          "createdAt"
        ],
        "type": "object"
      },
      "MapsService": {
        "enum": ["Google", "OSRM", "MMI", "NextBillion", "SelfTuned"],
        "type": "string"
      },
      "SmsService": {
        "enum": ["MyValueFirst", "ExotelSms", "GupShup", "TwillioSms"],
        "type": "string"
      },
      "MapsServiceConfigUpdateReq": {
        "oneOf": [
          {
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/GoogleCfgUpdateReq"
              },
              "serviceName": { "enum": ["Google"], "type": "string" }
            },
            "required": ["serviceName", "serviceConfig"],
            "type": "object"
          },
          {
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/OSRMCfgUpdateReq"
              },
              "serviceName": { "enum": ["OSRM"], "type": "string" }
            },
            "required": ["serviceName", "serviceConfig"],
            "type": "object"
          },
          {
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/MMICfgUpdateReq"
              },
              "serviceName": { "enum": ["MMI"], "type": "string" }
            },
            "required": ["serviceName", "serviceConfig"],
            "type": "object"
          }
        ]
      },
      "GoogleCfgUpdateReq": {
        "properties": {
          "googleKey": { "type": "string" },
          "googleMapsUrl": { "$ref": "#/components/schemas/BaseUrl" },
          "googlePlaceNewUrl": { "$ref": "#/components/schemas/BaseUrl" },
          "googleRoadsUrl": { "$ref": "#/components/schemas/BaseUrl" },
          "googleRouteConfig": {
            "$ref": "#/components/schemas/GoogleRouteConfig"
          },
          "useAdvancedDirections": { "type": "boolean" },
          "useNewPlaces": { "type": "boolean" }
        },
        "required": [
          "googleMapsUrl",
          "googleRoadsUrl",
          "googleKey",
          "useAdvancedDirections",
          "googleRouteConfig",
          "googlePlaceNewUrl",
          "useNewPlaces"
        ],
        "type": "object"
      },
      "GoogleRouteConfig": {
        "properties": {
          "computeAlternativeRoutes": { "type": "boolean" },
          "routePreference": {
            "$ref": "#/components/schemas/RoutingPreference"
          },
          "url": { "$ref": "#/components/schemas/BaseUrl" }
        },
        "required": ["computeAlternativeRoutes", "routePreference", "url"],
        "type": "object"
      },
      "RoutingPreference": {
        "enum": [
          "ROUTING_PREFERENCE_UNSPECIFIED",
          "TRAFFIC_UNAWARE",
          "TRAFFIC_AWARE",
          "TRAFFIC_AWARE_OPTIMAL"
        ],
        "type": "string"
      },
      "OSRMCfgUpdateReq": {
        "properties": {
          "osrmUrl": { "$ref": "#/components/schemas/BaseUrl" },
          "radiusDeviation": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "radiusDeviationWithUnit": { "$ref": "#/components/schemas/Distance" }
        },
        "required": ["osrmUrl"],
        "type": "object"
      },
      "MMICfgUpdateReq": {
        "properties": {
          "mmiApiKey": { "type": "string" },
          "mmiAuthId": { "type": "string" },
          "mmiAuthSecret": { "type": "string" },
          "mmiAuthUrl": { "$ref": "#/components/schemas/BaseUrl" },
          "mmiKeyUrl": { "$ref": "#/components/schemas/BaseUrl" },
          "mmiNonKeyUrl": { "$ref": "#/components/schemas/BaseUrl" }
        },
        "required": [
          "mmiAuthUrl",
          "mmiAuthId",
          "mmiAuthSecret",
          "mmiApiKey",
          "mmiKeyUrl",
          "mmiNonKeyUrl"
        ],
        "type": "object"
      },
      "MapsServiceUsageConfigUpdateReq": {
        "properties": {
          "autoComplete": { "$ref": "#/components/schemas/MapsService" },
          "getDistances": { "$ref": "#/components/schemas/MapsService" },
          "getEstimatedPickupDistances": {
            "$ref": "#/components/schemas/MapsService"
          },
          "getPlaceDetails": { "$ref": "#/components/schemas/MapsService" },
          "getPlaceName": { "$ref": "#/components/schemas/MapsService" },
          "getRoutes": { "$ref": "#/components/schemas/MapsService" },
          "snapToRoad": { "$ref": "#/components/schemas/MapsService" }
        },
        "type": "object"
      },
      "SmsServiceConfigUpdateReq": {
        "oneOf": [
          {
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/MyValueFirstCfgUpdateReq"
              },
              "serviceName": { "enum": ["MyValueFirst"], "type": "string" }
            },
            "required": ["serviceName", "serviceConfig"],
            "type": "object"
          },
          {
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/ExotelSmsCfgUpdateReq"
              },
              "serviceName": { "enum": ["ExotelSms"], "type": "string" }
            },
            "required": ["serviceName", "serviceConfig"],
            "type": "object"
          },
          {
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/GupShupCfgUpdateReq"
              },
              "serviceName": { "enum": ["GupShup"], "type": "string" }
            },
            "required": ["serviceName", "serviceConfig"],
            "type": "object"
          }
        ]
      },
      "MyValueFirstCfgUpdateReq": {
        "properties": {
          "password": { "type": "string" },
          "url": { "$ref": "#/components/schemas/BaseUrl" },
          "username": { "type": "string" }
        },
        "required": ["username", "password", "url"],
        "type": "object"
      },
      "ExotelSmsCfgUpdateReq": {
        "properties": {
          "apiKey": { "type": "string" },
          "apiToken": { "type": "string" },
          "sid": { "type": "string" },
          "url": { "type": "string" }
        },
        "required": ["apiKey", "apiToken", "sid", "url"],
        "type": "object"
      },
      "GupShupCfgUpdateReq": {
        "properties": {
          "gpassword": { "type": "string" },
          "gusername": { "type": "string" },
          "templateId": { "type": "string" },
          "url": { "$ref": "#/components/schemas/BaseUrl" }
        },
        "required": ["gusername", "gpassword", "url", "templateId"],
        "type": "object"
      },
      "SmsServiceUsageConfigUpdateReq": {
        "properties": {
          "smsProvidersPriorityList": {
            "items": { "$ref": "#/components/schemas/SmsService" },
            "type": "array"
          }
        },
        "required": ["smsProvidersPriorityList"],
        "type": "object"
      },
      "CreateMerchantOperatingCityRes": {
        "properties": { "cityId": { "type": "string" } },
        "required": ["cityId"],
        "type": "object"
      },
      "CreateMerchantOperatingCityReqT": {
        "properties": {
          "city": { "$ref": "#/components/schemas/City" },
          "country": { "$ref": "#/components/schemas/Country" },
          "currency": { "$ref": "#/components/schemas/Currency" },
          "distanceUnit": { "$ref": "#/components/schemas/DistanceUnit" },
          "enableForMerchant": { "type": "boolean" },
          "exophone": { "type": "string" },
          "geom": { "type": "string" },
          "lat": { "format": "double", "type": "number" },
          "long": { "format": "double", "type": "number" },
          "primaryLanguage": { "$ref": "#/components/schemas/Language" },
          "rcNumberPrefixList": {
            "items": { "type": "string" },
            "type": "array"
          },
          "state": { "$ref": "#/components/schemas/IndianState" },
          "supportNumber": { "type": "string" }
        },
        "required": [
          "geom",
          "city",
          "state",
          "country",
          "lat",
          "long",
          "enableForMerchant",
          "exophone"
        ],
        "type": "object"
      },
      "IndianState": {
        "enum": [
          "AndhraPradesh",
          "ArunachalPradesh",
          "Assam",
          "Bihar",
          "Chhattisgarh",
          "Goa",
          "Gujarat",
          "Haryana",
          "HimachalPradesh",
          "Jharkhand",
          "Karnataka",
          "Kerala",
          "MadhyaPradesh",
          "Maharashtra",
          "Manipur",
          "Meghalaya",
          "Mizoram",
          "Nagaland",
          "Odisha",
          "Punjab",
          "Rajasthan",
          "Sikkim",
          "TamilNadu",
          "Telangana",
          "Tripura",
          "UttarPradesh",
          "Uttarakhand",
          "WestBengal",
          "AndamanAndNicobarIslands",
          "ChandigarhUT",
          "DadraAndNagarHaveli",
          "DamanAndDiu",
          "NationalCapitalTerritory",
          "Lakshadweep",
          "Puducherry",
          "Minnesota",
          "AnyState"
        ],
        "type": "string"
      },
      "Country": {
        "enum": ["India", "France", "USA", "AnyCountry"],
        "type": "string"
      },
      "UpsertSpecialLocationReqT": {
        "properties": {
          "category": { "type": "string" },
          "city": { "$ref": "#/components/schemas/City" },
          "geom": { "type": "string" },
          "locationName": { "type": "string" }
        },
        "type": "object"
      },
      "UpsertSpecialLocationGateReqT": {
        "properties": {
          "address": { "type": "string" },
          "canQueueUpOnGate": { "type": "boolean" },
          "defaultDriverExtra": {
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "geom": { "type": "string" },
          "latitude": { "format": "double", "type": "number" },
          "longitude": { "format": "double", "type": "number" },
          "name": { "type": "string" }
        },
        "required": ["name"],
        "type": "object"
      },
      "CustomerAuthReq": {
        "properties": {
          "mobileCountryCode": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "otpChannel": { "$ref": "#/components/schemas/OTPChannel" }
        },
        "required": ["mobileNumber", "mobileCountryCode"],
        "type": "object"
      },
      "ExotelHeartbeatReq": {
        "properties": {
          "incoming_affected": {
            "items": { "$ref": "#/components/schemas/PhoneNumber" },
            "type": "array"
          },
          "outgoing_affected": {
            "items": { "$ref": "#/components/schemas/PhoneNumber" },
            "type": "array"
          },
          "status_type": { "$ref": "#/components/schemas/StatusType" },
          "timestamp": { "$ref": "#/components/schemas/UTCTime" }
        },
        "required": [
          "timestamp",
          "status_type",
          "incoming_affected",
          "outgoing_affected"
        ],
        "type": "object"
      },
      "StatusType": {
        "enum": ["OK", "WARNING", "CRITICAL", "PAYLOAD_TOO_LARGE"],
        "type": "string"
      },
      "PhoneNumber": {
        "properties": {
          "phone_number": { "type": "string" },
          "phone_number_sid": { "type": "string" }
        },
        "required": ["phone_number_sid", "phone_number"],
        "type": "object"
      },
      "FRFSStatusUpdateReq": {
        "properties": {
          "bookingIds": { "items": { "type": "string" }, "type": "array" }
        },
        "required": ["bookingIds"],
        "type": "object"
      },
      "CacTypeValidationResp": {
        "properties": { "result": { "type": "boolean" } },
        "required": ["result"],
        "type": "object"
      },
      "CacTypeValidationReq": {
        "properties": {
          "key": { "type": "string" },
          "value": { "$ref": "#/components/schemas/Value" }
        },
        "required": ["key", "value"],
        "type": "object"
      }
    },
    "responses": { "Unauthorized": { "description": "Unauthorized" } },
    "securitySchemes": {
      "\"username-password\"": {
        "description": "The basic authentication scheme is based on the model that the client must authenticate itself with a user-ID and a password for each realm.",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      },
      "DashboardVerifyToken": {
        "description": "Checks whether dashboard token is registered.",
        "in": "header",
        "name": "token",
        "type": "apiKey"
      },
      "PartnerOrganizationVerifyAPIKey": {
        "description": "Checks whether partner organization api key is registered.If you don't have a partner organization api key, please contact our support team.",
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey"
      },
      "SignatureAuthReq": {
        "description": "Looks up the given key Id in the Core registry.",
        "in": "header",
        "name": "x-sdk-authorization",
        "type": "apiKey"
      },
      "VerifyToken": {
        "description": "Checks whether token is registered.If you don't have a token, use registration endpoints.",
        "in": "header",
        "name": "token",
        "type": "apiKey"
      }
    }
  },
  "openapi": "3.0.0"
}
